package Numbermat.Problems;

import Numbermat.Algorithms;
import Numbermat.AlgorithmsSteps;
import Numbermat.GUI.Config;
import Numbermat.Pair;
import Numbermat.Utils;

/**
 *
 * @author Valdemar Svabensky <395868@mail.muni.cz>
 */
public final class QuadraticCongruenceSimpleProblem extends MathProblem {

    private int a;
    private int m;
    
    public QuadraticCongruenceSimpleProblem(final String difficulty) {
        easyBounds = new Pair(2, 39);
        mediumBounds = new Pair(11, 99);
        hardBounds = new Pair(11, 199);
        
        final Pair<Integer, Integer> bounds = initBounds(difficulty);
        final int lowerBound = bounds.getFirst();
        final int upperBound = bounds.getSecond();
        
        int aa, mm;
        while (true) {
            aa = Algorithms.randInt(lowerBound, upperBound);
            try {
                mm = Algorithms.randPrime(lowerBound, upperBound);
            } catch (RuntimeException ex) {
                mm = 7;
            }
            if (!difficulty.equals(Config.EASY)) {
                mm = Algorithms.productOfTwoPrimes(2, 7, 5, 13);
            }
            if (!Algorithms.quadraticCongruenceSimple(aa, mm).isEmpty())
                break;
        }
        setVariables(aa, mm);
    }
    
    public QuadraticCongruenceSimpleProblem(final int aa, final int mm) {
        setVariables(aa, mm);
    }
    
    private void setVariables(final int aa, final int mm) {
        a = aa;
        m = mm;
        result = Algorithms.quadraticCongruenceSimple(a, m);
        prepareAll();
    }
    
    @Override
    protected void prepareProblemPlaintext() {
        final StringBuilder lineEnd = AlgorithmsSteps.buildModLineEnd(m);
        problemPlaintext = AlgorithmsSteps.buildBinomialCongruence(1, 'x', 2, 0, -a, lineEnd).toString();
    }

    @Override
    protected void prepareProblemLaTeX() {
        final String tmp = Utils.prepareCongruencesMath(problemPlaintext);
        problemLaTeX = Utils.prepareDisplayMath(tmp).toString();
    }

    @Override
    protected void prepareSolutionPlaintext() {
        solutionPlaintext = AlgorithmsSteps.quadraticCongruenceSimpleSteps('x', a, m);
    }

    @Override
    protected void prepareSolutionLaTeX() {
        solutionLaTeX = Utils.prepareBasicMath(solutionPlaintext);
        solutionLaTeX = Utils.prepareCongruencesMath(solutionLaTeX);
        solutionLaTeX = Utils.prepareFractionsMath(solutionLaTeX);
        solutionLaTeX = Utils.prepareAlignMath(solutionLaTeX);
    }
}
