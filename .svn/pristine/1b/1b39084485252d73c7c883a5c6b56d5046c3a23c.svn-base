package Numbermat;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.*;
import static org.junit.Assert.*;

/**
 *
 * @author Valdemar Svabensky <395868@mail.muni.cz>
 */
public class AlgorithmsTests {
    
    @Test
    public void testIsPrime() {
        assertFalse(Algorithms.isPrime(0));
        assertFalse(Algorithms.isPrime(1));
        assertFalse(Algorithms.isPrime(4));
        assertFalse(Algorithms.isPrime(9));
        assertFalse(Algorithms.isPrime(341));
        assertFalse(Algorithms.isPrime(1234567890));
        assertTrue(Algorithms.isPrime(2));
        assertTrue(Algorithms.isPrime(3));
        assertTrue(Algorithms.isPrime(5));
        assertTrue(Algorithms.isPrime(97));
        assertTrue(Algorithms.isPrime(1500450271));
    }
    
    @Test
    public void testDivisors() {
        List<Integer> result, expected;
        
        result = Algorithms.divisors(2);
        expected = Arrays.asList(1, 2);
        assertTrue(result.equals(expected));
        
        result = Algorithms.divisors(28);
        expected = Arrays.asList(1, 2, 4, 7, 14, 28);
        assertTrue(result.equals(expected));
    }
    
    @Test
    public void testIsCoprime() {
        assertFalse(Algorithms.isCoprime(4864, 3458));
        assertTrue(Algorithms.isCoprime(1, 3458));
        assertTrue(Algorithms.isCoprime(1, 0));
        assertFalse(Algorithms.isCoprime(0, 0));
        
        try {
            Algorithms.isCoprime(-15, 15);
            fail();
        } catch (IllegalArgumentException ex) {
            //OK
        }
    }
    
    @Test
    public void testGCD() {
        int a = 4864;
        int b = 3458;
        int gcd = 38;
        assertTrue(Algorithms.gcd(a, b) == gcd);
        assertTrue(Algorithms.gcd(b, a) == gcd);
        
        a = 1;
        assertTrue(Algorithms.gcd(a, b) == a);
        b = 0;
        assertTrue(Algorithms.gcd(a, b) == a);
        a = 0;
        assertTrue(Algorithms.gcd(a, b) == a);
        
        try {
            a = -15;
            Algorithms.gcd(a, b);
            fail();
        } catch (IllegalArgumentException ex) {
            //OK
        }
    }
    
    @Test
    public void testBezout() {
        int a = 4864;
        int b = 3458;
        int gcd = 38;
        int x = 32;
        int y = -45;
        List<Integer> result, expected;
        
        result = Algorithms.bezout(a, b);
        expected = Arrays.asList(gcd, x, y);
        assertTrue(result.equals(expected));
        
        a = 15;
        b = 1;
        result = Algorithms.bezout(a, b);
        expected = Arrays.asList(1, 0, 1);
        assertTrue(result.equals(expected));
        
        b = 0;
        result = Algorithms.bezout(a, b);
        expected = Arrays.asList(a, 1, 0);
        assertTrue(result.equals(expected));
        
        a = 0;
        result = Algorithms.bezout(a, b);
        expected = Arrays.asList(a, 1, 0);
        assertTrue(result.equals(expected));
        
        try {
            b = -15;
            Algorithms.bezout(a, b);
            fail();
        } catch (IllegalArgumentException ex) {
            //OK
        }
        try {
            a = 4;
            b = 15;
            Algorithms.bezout(a, b);
            fail();
        } catch (IllegalArgumentException ex) {
            //OK
        }
    }
    
    @Test
    public void testFactorize() {
        int n = 4864;
        ArrayList<Pair<Integer, Integer>> factors = new ArrayList<>();
        factors.add(new Pair(2, 8));
        factors.add(new Pair(19, 1));
        assertEquals(factors, Algorithms.factorize(n));
        
        n = 3458;
        factors = new ArrayList<>();
        factors.add(new Pair(2, 1));
        factors.add(new Pair(7, 1));
        factors.add(new Pair(13, 1));
        factors.add(new Pair(19, 1));
        assertEquals(factors, Algorithms.factorize(n));
        
        n = 1;
        factors = new ArrayList<>();
        factors.add(new Pair(1, 1));
        assertEquals(factors, Algorithms.factorize(n));
        
        n = 0;
        factors = new ArrayList<>();
        factors.add(new Pair(0, 1));
        assertEquals(factors, Algorithms.factorize(n));
        
        try {
            n = -15;
            Algorithms.factorize(n);
            fail();
        } catch (IllegalArgumentException ex) {
            //OK
        }
    }
    
    @Test
    public void testPhi() {
        int n = 4864;
        int phi = 2304;
        assertTrue(phi == Algorithms.eulerPhi(n));
        
        n = 3458;
        phi = 1296;
        assertTrue(phi == Algorithms.eulerPhi(n));
        
        n = 1;
        phi = 1;
        assertTrue(phi == Algorithms.eulerPhi(n));
        
        n = 0;
        phi = 0;
        assertTrue(phi == Algorithms.eulerPhi(n));
        
        try {
            n = -15;
            Algorithms.eulerPhi(n);
            fail();
        } catch (IllegalArgumentException ex) {
            //OK
        }
    }
    
    @Test
    public void testLinearCongruence() {
        List<Integer> result, expected;
        
        result = Algorithms.linearCongurence(12, 20, 28);
        expected = Arrays.asList(4, 11, 18, 25);
        assertTrue(result.equals(expected));
        
        result = Algorithms.linearCongurence(21, 6, 9);
        expected = Arrays.asList(2, 5, 8);
        assertTrue(result.equals(expected));
        
        result = Algorithms.linearCongurence(11881376, 16, 11);
        expected = Arrays.asList(5);
        assertTrue(result.equals(expected));
        
        result = Algorithms.linearCongurence(26, 4, 9);
        expected = Arrays.asList(5);
        assertTrue(result.equals(expected));
        
        result = Algorithms.linearCongurence(76, 8, 10);
        expected = Arrays.asList(3, 8);
        assertTrue(result.equals(expected));
        
        result = Algorithms.linearCongurence(5, 7, 8);
        expected = Arrays.asList(3);
        assertTrue(result.equals(expected));
        
        result = Algorithms.linearCongurence(16, 4, 6);
        expected = Arrays.asList(1, 4);
        assertTrue(result.equals(expected));
        
        result = Algorithms.linearCongurence(4, 3, 7);
        expected = Arrays.asList(6);
        assertTrue(result.equals(expected));
        
        result = Algorithms.linearCongurence(642, 1844, 1144);
        expected = Arrays.asList(10, 582);
        assertTrue(result.equals(expected));
        
        result = Algorithms.linearCongurence(3, 1, 6);
        expected = Arrays.asList();
        assertTrue(result.equals(expected));
    }
}

