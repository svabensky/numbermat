<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="en">
<head>
<!-- Generated by javadoc (version 1.7.0_21) on Fri May 09 20:16:25 CEST 2014 -->
<meta http-equiv="Content-Type" content="text/html" charset="UTF-8">
<title>AlgorithmsSteps</title>
<meta name="date" content="2014-05-09">
<link rel="stylesheet" type="text/css" href="../../../../stylesheet.css" title="Style">
</head>
<body>
<script type="text/javascript"><!--
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="AlgorithmsSteps";
    }
//-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar_top">
<!--   -->
</a><a href="#skip-navbar_top" title="Skip navigation links"></a><a name="navbar_top_firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/AlgorithmsSteps.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../../index-files/index-1.html">Index</a></li>
<li><a href="../../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html" title="class in cz.muni.fi.Numbermat"><span class="strong">Prev Class</span></a></li>
<li><a href="../../../../cz/muni/fi/Numbermat/Pair.html" title="class in cz.muni.fi.Numbermat"><span class="strong">Next Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../../../../index.html?cz/muni/fi/Numbermat/AlgorithmsSteps.html" target="_top">Frames</a></li>
<li><a href="AlgorithmsSteps.html" target="_top">No Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../../../../allclasses-noframe.html">All Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field_summary">Field</a>&nbsp;|&nbsp;</li>
<li>Constr&nbsp;|&nbsp;</li>
<li><a href="#method_summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field_detail">Field</a>&nbsp;|&nbsp;</li>
<li>Constr&nbsp;|&nbsp;</li>
<li><a href="#method_detail">Method</a></li>
</ul>
</div>
<a name="skip-navbar_top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<div class="subTitle">cz.muni.fi.Numbermat</div>
<h2 title="Class AlgorithmsSteps" class="title">Class AlgorithmsSteps</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>cz.muni.fi.Numbermat.AlgorithmsSteps</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<hr>
<br>
<pre>public final class <span class="strong">AlgorithmsSteps</span>
extends java.lang.Object</pre>
<div class="block">Methods to generate step-by-step solutions to computations in Algorithms class.</div>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- =========== FIELD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="field_summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Field and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/AlgorithmsSteps.html#CIRC">CIRC</a></strong></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/AlgorithmsSteps.html#CONG">CONG</a></strong></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/AlgorithmsSteps.html#INFINITE_SOLUTIONS">INFINITE_SOLUTIONS</a></strong></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/AlgorithmsSteps.html#MULT">MULT</a></strong></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/AlgorithmsSteps.html#NO_SOLUTION">NO_SOLUTION</a></strong></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/AlgorithmsSteps.html#NOT_CONG">NOT_CONG</a></strong></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/AlgorithmsSteps.html#NOT_DIVIDES">NOT_DIVIDES</a></strong></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/AlgorithmsSteps.html#PHI">PHI</a></strong></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/AlgorithmsSteps.html#PHIB">PHIB</a></strong></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/AlgorithmsSteps.html#SEPARATOR">SEPARATOR</a></strong></code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/AlgorithmsSteps.html#SIGMA">SIGMA</a></strong></code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/AlgorithmsSteps.html#TIMES">TIMES</a></strong></code>&nbsp;</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method_summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span>Methods</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/AlgorithmsSteps.html#bezoutSteps(int, int)">bezoutSteps</a></strong>(int&nbsp;a,
           int&nbsp;b)</code>
<div class="block">Extended Euclidean algorithm for solving Bezout's identity.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/AlgorithmsSteps.html#binomialCongruenceSteps(int, int, int)">binomialCongruenceSteps</a></strong>(int&nbsp;n,
                       int&nbsp;a,
                       int&nbsp;m)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static java.lang.StringBuilder</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/AlgorithmsSteps.html#buildBinomialCongruence(int, char, int, int, int, java.lang.StringBuilder)">buildBinomialCongruence</a></strong>(int&nbsp;a,
                       char&nbsp;x,
                       int&nbsp;exp,
                       int&nbsp;b,
                       int&nbsp;c,
                       java.lang.StringBuilder&nbsp;lineEnd)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static java.lang.StringBuilder</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/AlgorithmsSteps.html#buildGCDEquals(int, int)">buildGCDEquals</a></strong>(int&nbsp;a,
              int&nbsp;b)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static java.lang.StringBuilder</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/AlgorithmsSteps.html#buildLegendreSymbolEquals(int, int)">buildLegendreSymbolEquals</a></strong>(int&nbsp;a,
                         int&nbsp;p)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static java.lang.StringBuilder</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/AlgorithmsSteps.html#buildLinearCongruence(int, char, int, java.lang.StringBuilder)">buildLinearCongruence</a></strong>(int&nbsp;a,
                     char&nbsp;x,
                     int&nbsp;b,
                     java.lang.StringBuilder&nbsp;lineEnd)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static java.lang.StringBuilder</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/AlgorithmsSteps.html#buildModLineEnd(int)">buildModLineEnd</a></strong>(int&nbsp;m)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static java.lang.StringBuilder</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/AlgorithmsSteps.html#buildModPowLineStart(int, int)">buildModPowLineStart</a></strong>(int&nbsp;base,
                    int&nbsp;exp)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static java.lang.StringBuilder</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/AlgorithmsSteps.html#buildPhiEquals(int)">buildPhiEquals</a></strong>(int&nbsp;n)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/AlgorithmsSteps.html#eulerPhiSteps(int)">eulerPhiSteps</a></strong>(int&nbsp;n)</code>
<div class="block">Euler's totient (phi) function.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/AlgorithmsSteps.html#gcdSteps(int, int)">gcdSteps</a></strong>(int&nbsp;a,
        int&nbsp;b)</code>
<div class="block">Euclidean algorithm for finding the greatest common divisor of two integers.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/AlgorithmsSteps.html#legendreSymbolSteps(int, int)">legendreSymbolSteps</a></strong>(int&nbsp;a,
                   int&nbsp;p)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/AlgorithmsSteps.html#linearCongruenceSystemSteps(int, java.util.List, java.util.List, java.util.List)">linearCongruenceSystemSteps</a></strong>(int&nbsp;count,
                           java.util.List&lt;java.lang.Integer&gt;&nbsp;aList,
                           java.util.List&lt;java.lang.Integer&gt;&nbsp;bList,
                           java.util.List&lt;java.lang.Integer&gt;&nbsp;nList)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/AlgorithmsSteps.html#modPowSteps(int, int, int)">modPowSteps</a></strong>(int&nbsp;base,
           int&nbsp;exp,
           int&nbsp;mod)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/AlgorithmsSteps.html#permutationOrderSteps(java.util.List)">permutationOrderSteps</a></strong>(java.util.List&lt;java.lang.Integer&gt;&nbsp;inputPerm)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/AlgorithmsSteps.html#permutationToMatrix(java.util.List)">permutationToMatrix</a></strong>(java.util.List&lt;java.lang.Integer&gt;&nbsp;inputPerm)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/AlgorithmsSteps.html#quadraticCongruenceGeneralSteps(int, int, int, int)">quadraticCongruenceGeneralSteps</a></strong>(int&nbsp;a,
                               int&nbsp;b,
                               int&nbsp;c,
                               int&nbsp;m)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/AlgorithmsSteps.html#quadraticCongruenceSimpleSteps(char, int, int)">quadraticCongruenceSimpleSteps</a></strong>(char&nbsp;x,
                              int&nbsp;a,
                              int&nbsp;m)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/AlgorithmsSteps.html#unitGroupElementOrderSteps(int, int)">unitGroupElementOrderSteps</a></strong>(int&nbsp;element,
                          int&nbsp;n)</code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods_inherited_from_class_java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<ul class="blockList">
<li class="blockList"><a name="field_detail">
<!--   -->
</a>
<h3>Field Detail</h3>
<a name="MULT">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>MULT</h4>
<pre>public static final&nbsp;java.lang.String MULT</pre>
<dl><dt><span class="strong">See Also:</span></dt><dd><a href="../../../../constant-values.html#cz.muni.fi.Numbermat.AlgorithmsSteps.MULT">Constant Field Values</a></dd></dl>
</li>
</ul>
<a name="CONG">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>CONG</h4>
<pre>public static final&nbsp;java.lang.String CONG</pre>
<dl><dt><span class="strong">See Also:</span></dt><dd><a href="../../../../constant-values.html#cz.muni.fi.Numbermat.AlgorithmsSteps.CONG">Constant Field Values</a></dd></dl>
</li>
</ul>
<a name="NOT_CONG">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>NOT_CONG</h4>
<pre>public static final&nbsp;java.lang.String NOT_CONG</pre>
<dl><dt><span class="strong">See Also:</span></dt><dd><a href="../../../../constant-values.html#cz.muni.fi.Numbermat.AlgorithmsSteps.NOT_CONG">Constant Field Values</a></dd></dl>
</li>
</ul>
<a name="PHI">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>PHI</h4>
<pre>public static final&nbsp;java.lang.String PHI</pre>
<dl><dt><span class="strong">See Also:</span></dt><dd><a href="../../../../constant-values.html#cz.muni.fi.Numbermat.AlgorithmsSteps.PHI">Constant Field Values</a></dd></dl>
</li>
</ul>
<a name="PHIB">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>PHIB</h4>
<pre>public static final&nbsp;java.lang.String PHIB</pre>
<dl><dt><span class="strong">See Also:</span></dt><dd><a href="../../../../constant-values.html#cz.muni.fi.Numbermat.AlgorithmsSteps.PHIB">Constant Field Values</a></dd></dl>
</li>
</ul>
<a name="NOT_DIVIDES">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>NOT_DIVIDES</h4>
<pre>public static final&nbsp;java.lang.String NOT_DIVIDES</pre>
<dl><dt><span class="strong">See Also:</span></dt><dd><a href="../../../../constant-values.html#cz.muni.fi.Numbermat.AlgorithmsSteps.NOT_DIVIDES">Constant Field Values</a></dd></dl>
</li>
</ul>
<a name="TIMES">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>TIMES</h4>
<pre>public static final&nbsp;java.lang.String TIMES</pre>
<dl><dt><span class="strong">See Also:</span></dt><dd><a href="../../../../constant-values.html#cz.muni.fi.Numbermat.AlgorithmsSteps.TIMES">Constant Field Values</a></dd></dl>
</li>
</ul>
<a name="SIGMA">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>SIGMA</h4>
<pre>public static final&nbsp;java.lang.String SIGMA</pre>
<dl><dt><span class="strong">See Also:</span></dt><dd><a href="../../../../constant-values.html#cz.muni.fi.Numbermat.AlgorithmsSteps.SIGMA">Constant Field Values</a></dd></dl>
</li>
</ul>
<a name="CIRC">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>CIRC</h4>
<pre>public static final&nbsp;java.lang.String CIRC</pre>
<dl><dt><span class="strong">See Also:</span></dt><dd><a href="../../../../constant-values.html#cz.muni.fi.Numbermat.AlgorithmsSteps.CIRC">Constant Field Values</a></dd></dl>
</li>
</ul>
<a name="SEPARATOR">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>SEPARATOR</h4>
<pre>public static final&nbsp;java.lang.String SEPARATOR</pre>
</li>
</ul>
<a name="NO_SOLUTION">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>NO_SOLUTION</h4>
<pre>public static final&nbsp;java.lang.String NO_SOLUTION</pre>
</li>
</ul>
<a name="INFINITE_SOLUTIONS">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>INFINITE_SOLUTIONS</h4>
<pre>public static final&nbsp;java.lang.String INFINITE_SOLUTIONS</pre>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method_detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="gcdSteps(int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>gcdSteps</h4>
<pre>public static&nbsp;java.lang.String&nbsp;gcdSteps(int&nbsp;a,
                        int&nbsp;b)</pre>
<div class="block">Euclidean algorithm for finding the greatest common divisor of two integers.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - Integer</dd><dd><code>b</code> - Integer</dd>
<dt><span class="strong">Returns:</span></dt><dd>Step-by-step solution to the greatest common divisor problem</dd></dl>
</li>
</ul>
<a name="buildGCDEquals(int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>buildGCDEquals</h4>
<pre>public static&nbsp;java.lang.StringBuilder&nbsp;buildGCDEquals(int&nbsp;a,
                                     int&nbsp;b)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - Integer</dd><dd><code>b</code> - Integer</dd>
<dt><span class="strong">Returns:</span></dt><dd>StringBuilder of form "(a, b) = "</dd></dl>
</li>
</ul>
<a name="bezoutSteps(int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>bezoutSteps</h4>
<pre>public static&nbsp;java.lang.String&nbsp;bezoutSteps(int&nbsp;a,
                           int&nbsp;b)</pre>
<div class="block">Extended Euclidean algorithm for solving Bezout's identity.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - Non-negative integer, a >= b</dd><dd><code>b</code> - Non-negative integer</dd>
<dt><span class="strong">Returns:</span></dt><dd>Step-by-step solution to solving Bezout's identity</dd></dl>
</li>
</ul>
<a name="eulerPhiSteps(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>eulerPhiSteps</h4>
<pre>public static&nbsp;java.lang.String&nbsp;eulerPhiSteps(int&nbsp;n)</pre>
<div class="block">Euler's totient (phi) function.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>n</code> - Positive integer</dd>
<dt><span class="strong">Returns:</span></dt><dd>Step-by-step solution to finding the value of phi n</dd></dl>
</li>
</ul>
<a name="buildPhiEquals(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>buildPhiEquals</h4>
<pre>public static&nbsp;java.lang.StringBuilder&nbsp;buildPhiEquals(int&nbsp;n)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>n</code> - Integer</dd>
<dt><span class="strong">Returns:</span></dt><dd>StringBuilder of form "φ(n) = "</dd></dl>
</li>
</ul>
<a name="buildLinearCongruence(int, char, int, java.lang.StringBuilder)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>buildLinearCongruence</h4>
<pre>public static&nbsp;java.lang.StringBuilder&nbsp;buildLinearCongruence(int&nbsp;a,
                                            char&nbsp;x,
                                            int&nbsp;b,
                                            java.lang.StringBuilder&nbsp;lineEnd)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - Integer</dd><dd><code>x</code> - Char with variable name</dd><dd><code>b</code> - Integer</dd><dd><code>lineEnd</code> - StringBuilder containing line end, usually " (mod n)\n"</dd>
<dt><span class="strong">Returns:</span></dt><dd>StringBuilder of form "a'x' ≡ b (mod n)\n"</dd></dl>
</li>
</ul>
<a name="buildModLineEnd(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>buildModLineEnd</h4>
<pre>public static&nbsp;java.lang.StringBuilder&nbsp;buildModLineEnd(int&nbsp;m)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>m</code> - Integer</dd>
<dt><span class="strong">Returns:</span></dt><dd>StringBuilder of form " (mod n)\n"</dd></dl>
</li>
</ul>
<a name="linearCongruenceSystemSteps(int, java.util.List, java.util.List, java.util.List)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>linearCongruenceSystemSteps</h4>
<pre>public static&nbsp;java.lang.String&nbsp;linearCongruenceSystemSteps(int&nbsp;count,
                                           java.util.List&lt;java.lang.Integer&gt;&nbsp;aList,
                                           java.util.List&lt;java.lang.Integer&gt;&nbsp;bList,
                                           java.util.List&lt;java.lang.Integer&gt;&nbsp;nList)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>count</code> - Number of equations, positive integer</dd><dd><code>aList</code> - List of integers</dd><dd><code>bList</code> - List of integers</dd><dd><code>nList</code> - List of positive integers</dd>
<dt><span class="strong">Returns:</span></dt><dd>Steps to solving a system of 'i' congruences of type a_i x ≡ b_i (mod n_i).</dd></dl>
</li>
</ul>
<a name="unitGroupElementOrderSteps(int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>unitGroupElementOrderSteps</h4>
<pre>public static&nbsp;java.lang.String&nbsp;unitGroupElementOrderSteps(int&nbsp;element,
                                          int&nbsp;n)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>element</code> - Positive integer (check is performed in Algorithms class)</dd><dd><code>n</code> - Integer > 1 (check is performed in Algorithms class)</dd>
<dt><span class="strong">Returns:</span></dt><dd>Step-by-step solution to finding order of element 'element' in group Zn×</dd></dl>
</li>
</ul>
<a name="modPowSteps(int, int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>modPowSteps</h4>
<pre>public static&nbsp;java.lang.String&nbsp;modPowSteps(int&nbsp;base,
                           int&nbsp;exp,
                           int&nbsp;mod)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>base</code> - Integer</dd><dd><code>exp</code> - Non-negative integer</dd><dd><code>mod</code> - Positive integer</dd>
<dt><span class="strong">Returns:</span></dt><dd>Steps of finding (base^exp) mod (mod)</dd></dl>
</li>
</ul>
<a name="buildModPowLineStart(int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>buildModPowLineStart</h4>
<pre>public static&nbsp;java.lang.StringBuilder&nbsp;buildModPowLineStart(int&nbsp;base,
                                           int&nbsp;exp)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>base</code> - Integer</dd><dd><code>exp</code> - Integer</dd>
<dt><span class="strong">Returns:</span></dt><dd>StringBuilder of form "base^exp ≡ "</dd></dl>
</li>
</ul>
<a name="legendreSymbolSteps(int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>legendreSymbolSteps</h4>
<pre>public static&nbsp;java.lang.String&nbsp;legendreSymbolSteps(int&nbsp;a,
                                   int&nbsp;p)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - Integer</dd><dd><code>p</code> - Odd prime (check is performed in Algorithms class)</dd>
<dt><span class="strong">Returns:</span></dt><dd>Steps of computing the Legendre symbol (a/p)</dd></dl>
</li>
</ul>
<a name="buildLegendreSymbolEquals(int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>buildLegendreSymbolEquals</h4>
<pre>public static&nbsp;java.lang.StringBuilder&nbsp;buildLegendreSymbolEquals(int&nbsp;a,
                                                int&nbsp;p)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - Integer</dd><dd><code>p</code> - Integer</dd>
<dt><span class="strong">Returns:</span></dt><dd>StringBuilder of form "(a/p) = "</dd></dl>
</li>
</ul>
<a name="quadraticCongruenceSimpleSteps(char, int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>quadraticCongruenceSimpleSteps</h4>
<pre>public static&nbsp;java.lang.String&nbsp;quadraticCongruenceSimpleSteps(char&nbsp;x,
                                              int&nbsp;a,
                                              int&nbsp;m)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>x</code> - Char, variable symbol</dd><dd><code>a</code> - Integer</dd><dd><code>m</code> - Positive integer</dd>
<dt><span class="strong">Returns:</span></dt><dd>Steps in finding a solution for congruence of form 'x'^2 ≡ a (mod m).</dd></dl>
</li>
</ul>
<a name="buildBinomialCongruence(int, char, int, int, int, java.lang.StringBuilder)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>buildBinomialCongruence</h4>
<pre>public static&nbsp;java.lang.StringBuilder&nbsp;buildBinomialCongruence(int&nbsp;a,
                                              char&nbsp;x,
                                              int&nbsp;exp,
                                              int&nbsp;b,
                                              int&nbsp;c,
                                              java.lang.StringBuilder&nbsp;lineEnd)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - Integer</dd><dd><code>x</code> - Char, variable symbol</dd><dd><code>exp</code> - Positive integer</dd><dd><code>b</code> - Integer</dd><dd><code>c</code> - Integer</dd><dd><code>lineEnd</code> - StringBuilder containing line end, usually " (mod n)\n"</dd>
<dt><span class="strong">Returns:</span></dt><dd>StringBuilder of form "a'x'^{exp} + b'x' + c ≡ 0 (mod m)\n"</dd></dl>
</li>
</ul>
<a name="quadraticCongruenceGeneralSteps(int, int, int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>quadraticCongruenceGeneralSteps</h4>
<pre>public static&nbsp;java.lang.String&nbsp;quadraticCongruenceGeneralSteps(int&nbsp;a,
                                               int&nbsp;b,
                                               int&nbsp;c,
                                               int&nbsp;m)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - Integer</dd><dd><code>b</code> - Integer</dd><dd><code>c</code> - Integer</dd><dd><code>m</code> - Positive integer coprime with a</dd>
<dt><span class="strong">Returns:</span></dt><dd>Steps in finding a solution for congruence ax^2 + bx + c ≡ 0 (mod m)</dd></dl>
</li>
</ul>
<a name="binomialCongruenceSteps(int, int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>binomialCongruenceSteps</h4>
<pre>public static&nbsp;java.lang.String&nbsp;binomialCongruenceSteps(int&nbsp;n,
                                       int&nbsp;a,
                                       int&nbsp;m)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>n</code> - Positive integer</dd><dd><code>a</code> - Integer</dd><dd><code>m</code> - Positive integer</dd>
<dt><span class="strong">Returns:</span></dt><dd>Steps in finding a solution for congruence x^n ≡ a (mod m)</dd></dl>
</li>
</ul>
<a name="permutationToMatrix(java.util.List)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>permutationToMatrix</h4>
<pre>public static&nbsp;java.lang.String&nbsp;permutationToMatrix(java.util.List&lt;java.lang.Integer&gt;&nbsp;inputPerm)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>inputPerm</code> - Permutation (a subgroup of Sn for n >= 1) up to 99 elements</dd>
<dt><span class="strong">Returns:</span></dt><dd>Representation of a permutation as a matrix</dd></dl>
</li>
</ul>
<a name="permutationOrderSteps(java.util.List)">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>permutationOrderSteps</h4>
<pre>public static&nbsp;java.lang.String&nbsp;permutationOrderSteps(java.util.List&lt;java.lang.Integer&gt;&nbsp;inputPerm)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>inputPerm</code> - Permutation (a subgroup of Sn for n >= 1)</dd>
<dt><span class="strong">Returns:</span></dt><dd>Decomposition into cycles and steps to finding permutation order</dd></dl>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar_bottom">
<!--   -->
</a><a href="#skip-navbar_bottom" title="Skip navigation links"></a><a name="navbar_bottom_firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/AlgorithmsSteps.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../../index-files/index-1.html">Index</a></li>
<li><a href="../../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html" title="class in cz.muni.fi.Numbermat"><span class="strong">Prev Class</span></a></li>
<li><a href="../../../../cz/muni/fi/Numbermat/Pair.html" title="class in cz.muni.fi.Numbermat"><span class="strong">Next Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../../../../index.html?cz/muni/fi/Numbermat/AlgorithmsSteps.html" target="_top">Frames</a></li>
<li><a href="AlgorithmsSteps.html" target="_top">No Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../../../../allclasses-noframe.html">All Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field_summary">Field</a>&nbsp;|&nbsp;</li>
<li>Constr&nbsp;|&nbsp;</li>
<li><a href="#method_summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field_detail">Field</a>&nbsp;|&nbsp;</li>
<li>Constr&nbsp;|&nbsp;</li>
<li><a href="#method_detail">Method</a></li>
</ul>
</div>
<a name="skip-navbar_bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>
