package Numbermat.Problems;

import Numbermat.Algorithms;
import Numbermat.GUI.utils.Configuration;
import Numbermat.Pair;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Valdemar Svabensky <395868@mail.muni.cz>
 */
public final class LinearCongruenceProblem extends MathProblem {
    
    private LinearCongruenceSystemProblem lcsProblem;
    private int a;
    private int b;
    private int n;
    
    public LinearCongruenceProblem(String difficulty) {
        Pair<Integer, Integer> bounds = Configuration.initBounds(difficulty);
        int lowerBound = bounds.getFirst();
        int upperBound = bounds.getSecond();
        int a1 = Algorithms.randInt(lowerBound, upperBound, false);
        int b1 = Algorithms.randInt(lowerBound, upperBound, true);
        int n1 = Algorithms.randInt(lowerBound, upperBound, false);
        setVariables(a1, b1, n1);
    }
    
    public LinearCongruenceProblem(int a1, int b1, int n1) {
        setVariables(a1, b1, n1);
    }
    
    private void setVariables(int a1, int b1, int n1) {
        List<Integer> aList = new ArrayList<>(1);
        List<Integer> bList = new ArrayList<>(1);
        List<Integer> nList = new ArrayList<>(1);
        aList.add(a1);
        bList.add(b1);
        nList.add(n1);

        lcsProblem = new LinearCongruenceSystemProblem(1, aList, bList, nList);
        a = a1;
        b = b1;
        n = n1;
        result = lcsProblem.getResult();
        prepareAll();
    }

    @Override
    protected void prepareProblemPlaintext() {
        problemPlaintext = lcsProblem.getProblemPlaintext();
    }

    @Override
    protected void prepareProblemLaTeX() {
        problemLaTeX = lcsProblem.getProblemLaTeX();
    }

    @Override
    protected void prepareSolutionPlaintext() {
        solutionPlaintext = lcsProblem.getSolutionPlaintext();
    }

    @Override
    protected void prepareSolutionLaTeX() {
        String solutionCopy = lcsProblem.getSolutionLaTeX();
        solutionCopy = solutionCopy.replaceAll(String.valueOf(a), "\\\\textcolor{red}{" + a + "}");
        solutionCopy = solutionCopy.replaceAll(String.valueOf(a % n), "\\\\textcolor{red}{" + a % n + "}");
        solutionCopy = solutionCopy.replaceAll(String.valueOf(b), "\\\\textcolor{blue}{" + b + "}");
        solutionCopy = solutionCopy.replaceAll(String.valueOf(b % n), "\\\\textcolor{blue}{" + b % n + "}");
        solutionCopy = solutionCopy.replaceAll(String.valueOf(n), "\\\\textcolor{OliveGreen}{" + n + "}");
        solutionLaTeX = solutionCopy;
    }
}
