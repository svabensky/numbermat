package Numbermat;

import Numbermat.Pair;
import Numbermat.Algorithms;
import java.util.ArrayList;
import org.junit.*;
import static org.junit.Assert.*;

/**
 *
 * @author Valdemar Svabensky <395868@mail.muni.cz>
 */
public class AlgorithmsTests {
    
    @Test
    public void testIsPrime() {
    }
    
    @Test
    public void testIsCoprime() {
        assertFalse(Algorithms.isCoprime(4864, 3458));
        assertTrue(Algorithms.isCoprime(1, 3458));
        assertTrue(Algorithms.isCoprime(1, 0));
        assertFalse(Algorithms.isCoprime(0, 0));
        
        try {
            Algorithms.isCoprime(-15, 15);
            fail();
        } catch (IllegalArgumentException ex) {
            //OK
        }
    }
    
    @Test
    public void testGCD() {
        int a = 4864;
        int b = 3458;
        int gcd = 38;
        assertTrue(Algorithms.gcd(a, b) == gcd);
        assertTrue(Algorithms.gcd(b, a) == gcd);
        
        a = 1;
        assertTrue(Algorithms.gcd(a, b) == a);
        b = 0;
        assertTrue(Algorithms.gcd(a, b) == a);
        a = 0;
        assertTrue(Algorithms.gcd(a, b) == a);
        
        try {
            a = -15;
            Algorithms.gcd(a, b);
            fail();
        } catch (IllegalArgumentException ex) {
            //OK
        }
    }
    
    @Test
    public void testBezout() {
        int a = 4864;
        int b = 3458;
        int gcd = 38;
        int x = 32;
        int y = -45;
        int[] result = Algorithms.bezout(a, b);
        assertTrue(result[0] == gcd);
        assertTrue(result[1] == x);
        assertTrue(result[2] == y);
        
        a = 15;
        b = 1;
        result = Algorithms.bezout(a, b);
        assertTrue(result[0] == 1);
        assertTrue(result[1] == 0);
        assertTrue(result[2] == 1);
        
        b = 0;
        result = Algorithms.bezout(a, b);
        assertTrue(result[0] == a);
        assertTrue(result[1] == 1);
        assertTrue(result[2] == 0);
        
        a = 0;
        result = Algorithms.bezout(a, b);
        assertTrue(result[0] == a);
        assertTrue(result[1] == 1);
        assertTrue(result[2] == 0);
        
        try {
            b = -15;
            Algorithms.bezout(a, b);
            fail();
        } catch (IllegalArgumentException ex) {
            //OK
        }
        try {
            a = 4;
            b = 15;
            Algorithms.bezout(a, b);
            fail();
        } catch (IllegalArgumentException ex) {
            //OK
        }
    }
    
    @Test
    public void testFactorize() {
        int n = 4864;
        ArrayList<Pair<Integer, Integer>> factors = new ArrayList<>();
        factors.add(new Pair(2, 8));
        factors.add(new Pair(19, 1));
        assertEquals(factors, Algorithms.factorize(n));
        
        n = 3458;
        factors = new ArrayList<>();
        factors.add(new Pair(2, 1));
        factors.add(new Pair(7, 1));
        factors.add(new Pair(13, 1));
        factors.add(new Pair(19, 1));
        assertEquals(factors, Algorithms.factorize(n));
        
        n = 1;
        factors = new ArrayList<>();
        factors.add(new Pair(1, 1));
        assertEquals(factors, Algorithms.factorize(n));
        
        n = 0;
        factors = new ArrayList<>();
        factors.add(new Pair(0, 1));
        assertEquals(factors, Algorithms.factorize(n));
        
        try {
            n = -15;
            Algorithms.factorize(n);
            fail();
        } catch (IllegalArgumentException ex) {
            //OK
        }
    }
    
    @Test
    public void testPhi() {
        int n = 4864;
        int phi = 2304;
        assertTrue(phi == Algorithms.eulerPhi(n));
        
        n = 3458;
        phi = 1296;
        assertTrue(phi == Algorithms.eulerPhi(n));
        
        n = 1;
        phi = 1;
        assertTrue(phi == Algorithms.eulerPhi(n));
        
        n = 0;
        phi = 0;
        assertTrue(phi == Algorithms.eulerPhi(n));
        
        try {
            n = -15;
            Algorithms.eulerPhi(n);
            fail();
        } catch (IllegalArgumentException ex) {
            //OK
        }
    }
}
