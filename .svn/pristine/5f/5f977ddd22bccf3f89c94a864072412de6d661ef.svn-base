<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="en">
<head>
<!-- Generated by javadoc (version 1.7.0_21) on Fri May 09 20:16:25 CEST 2014 -->
<meta http-equiv="Content-Type" content="text/html" charset="UTF-8">
<title>Algorithms</title>
<meta name="date" content="2014-05-09">
<link rel="stylesheet" type="text/css" href="../../../../stylesheet.css" title="Style">
</head>
<body>
<script type="text/javascript"><!--
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="Algorithms";
    }
//-->
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar_top">
<!--   -->
</a><a href="#skip-navbar_top" title="Skip navigation links"></a><a name="navbar_top_firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/Algorithms.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../../index-files/index-1.html">Index</a></li>
<li><a href="../../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>Prev Class</li>
<li><a href="../../../../cz/muni/fi/Numbermat/AlgorithmsSteps.html" title="class in cz.muni.fi.Numbermat"><span class="strong">Next Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../../../../index.html?cz/muni/fi/Numbermat/Algorithms.html" target="_top">Frames</a></li>
<li><a href="Algorithms.html" target="_top">No Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../../../../allclasses-noframe.html">All Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field_summary">Field</a>&nbsp;|&nbsp;</li>
<li>Constr&nbsp;|&nbsp;</li>
<li><a href="#method_summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field_detail">Field</a>&nbsp;|&nbsp;</li>
<li>Constr&nbsp;|&nbsp;</li>
<li><a href="#method_detail">Method</a></li>
</ul>
</div>
<a name="skip-navbar_top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<div class="subTitle">cz.muni.fi.Numbermat</div>
<h2 title="Class Algorithms" class="title">Class Algorithms</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>cz.muni.fi.Numbermat.Algorithms</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<hr>
<br>
<pre>public final class <span class="strong">Algorithms</span>
extends java.lang.Object</pre>
<div class="block">Static methods for computations and math problem solving.</div>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- =========== FIELD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="field_summary">
<!--   -->
</a>
<h3>Field Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Field Summary table, listing fields, and an explanation">
<caption><span>Fields</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Field and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static int</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#FOR_LOOP_ATTEMPTS">FOR_LOOP_ATTEMPTS</a></strong></code>
<div class="block">FOR loops upper limit.</div>
</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method_summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span>Methods</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static java.util.List&lt;java.lang.Integer&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#bezout(int, int)">bezout</a></strong>(int&nbsp;a,
      int&nbsp;b)</code>
<div class="block">Extended Euclidean algorithm for solving Bezout's identity.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static java.util.List&lt;java.lang.Integer&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#binomialCongruence(int, int, int)">binomialCongruence</a></strong>(int&nbsp;n,
                  int&nbsp;a,
                  int&nbsp;m)</code>
<div class="block">Solves the binomial congruence of form x^n â‰¡ a (mod m).</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static java.util.List&lt;java.lang.Integer&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#commonDivisors(int, int)">commonDivisors</a></strong>(int&nbsp;a,
              int&nbsp;b)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static java.util.List&lt;java.lang.Integer&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#divisors(int)">divisors</a></strong>(int&nbsp;n)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static java.util.List&lt;java.lang.Integer&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#elementsOfUnitGroup(int)">elementsOfUnitGroup</a></strong>(int&nbsp;n)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static int</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#eulerPhi(int)">eulerPhi</a></strong>(int&nbsp;n)</code>
<div class="block">Euler's totient (phi) function.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static java.util.List&lt;<a href="../../../../cz/muni/fi/Numbermat/Pair.html" title="class in cz.muni.fi.Numbermat">Pair</a>&lt;java.lang.Integer,java.lang.Integer&gt;&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#factorize(int)">factorize</a></strong>(int&nbsp;n)</code>
<div class="block">Prime factorization.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static int</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#findHighestPowerLessThan(int, int)">findHighestPowerLessThan</a></strong>(int&nbsp;base,
                        int&nbsp;limit)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static int</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#findNextHigherPowerOf4(int)">findNextHigherPowerOf4</a></strong>(int&nbsp;start)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static int</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#gcd(int, int)">gcd</a></strong>(int&nbsp;a,
   int&nbsp;b)</code>
<div class="block">Euclidean algorithm for finding the greatest common divisor of two integers.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static int</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#generateModulus(boolean)">generateModulus</a></strong>(boolean&nbsp;odd)</code>
<div class="block">Generates modulus for quadratic (simple and general) and binomial congruences.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static int</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#getNumberOfBits(int)">getNumberOfBits</a></strong>(int&nbsp;n)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static boolean</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#isCoprime(int, int)">isCoprime</a></strong>(int&nbsp;a,
         int&nbsp;b)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static void</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#isCoprimeCheck(int, int)">isCoprimeCheck</a></strong>(int&nbsp;a,
              int&nbsp;b)</code>
<div class="block">Throws exception if a, b are not coprime.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static boolean</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#isPerfectSquare(int)">isPerfectSquare</a></strong>(int&nbsp;n)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static boolean</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#isPowerOf2(int)">isPowerOf2</a></strong>(int&nbsp;n)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static boolean</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#isPowerOf4(int)">isPowerOf4</a></strong>(int&nbsp;n)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static boolean</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#isPrime(int)">isPrime</a></strong>(int&nbsp;n)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static void</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#isPrimeCheck(int, boolean)">isPrimeCheck</a></strong>(int&nbsp;a,
            boolean&nbsp;odd)</code>
<div class="block">Throws exception if a is not prime.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static int</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#lcm(int, int)">lcm</a></strong>(int&nbsp;a,
   int&nbsp;b)</code>
<div class="block">Least common multiple of two positive integers.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static int</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#legendreSymbol(int, int)">legendreSymbol</a></strong>(int&nbsp;a,
              int&nbsp;p)</code>
<div class="block">Computes the Legendre Symbol.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static <a href="../../../../cz/muni/fi/Numbermat/Pair.html" title="class in cz.muni.fi.Numbermat">Pair</a>&lt;java.lang.Integer,java.lang.Integer&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#linearCongruence(int, int, int)">linearCongruence</a></strong>(int&nbsp;a,
                int&nbsp;b,
                int&nbsp;n)</code>
<div class="block">Solving a congruence ax â‰¡ b (mod n).</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static <a href="../../../../cz/muni/fi/Numbermat/Pair.html" title="class in cz.muni.fi.Numbermat">Pair</a>&lt;java.lang.Integer,java.lang.Integer&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#linearCongruenceSystem(int, java.util.List, java.util.List, java.util.List)">linearCongruenceSystem</a></strong>(int&nbsp;count,
                      java.util.List&lt;java.lang.Integer&gt;&nbsp;aInList,
                      java.util.List&lt;java.lang.Integer&gt;&nbsp;bInList,
                      java.util.List&lt;java.lang.Integer&gt;&nbsp;nInList)</code>
<div class="block">Solving a system of 'i' congruences of type a_i x â‰¡ b_i (mod n_i).</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static void</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#listCheck(int, java.util.List)">listCheck</a></strong>(int&nbsp;count,
         java.util.List&lt;java.lang.Integer&gt;&nbsp;inputList)</code>
<div class="block">Throws exception if size of inputList is different than count</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static int</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#modPow(int, int, int)">modPow</a></strong>(int&nbsp;base,
      int&nbsp;exp,
      int&nbsp;mod)</code>
<div class="block">Modular exponentiation.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static int</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#normalizeIntModulo(int, int)">normalizeIntModulo</a></strong>(int&nbsp;a,
                  int&nbsp;n)</code>
<div class="block">Mods 'a' to closest positive integer modulo 'n'.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static void</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#notGreaterThanCheck(int, int)">notGreaterThanCheck</a></strong>(int&nbsp;a,
                   int&nbsp;upperBound)</code>
<div class="block">Throws exception if a > upperBound.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static void</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#notLessThanCheck(int, int)">notLessThanCheck</a></strong>(int&nbsp;a,
                int&nbsp;lowerBound)</code>
<div class="block">Throws exception if a < lowerBound.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static void</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#notNegativeCheck(int)">notNegativeCheck</a></strong>(int&nbsp;a)</code>
<div class="block">Throws exception if a is negative.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static void</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#notZeroCheck(int)">notZeroCheck</a></strong>(int&nbsp;a)</code>
<div class="block">Throws exception if a == 0.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static void</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#overflowCheck(int, int)">overflowCheck</a></strong>(int&nbsp;min,
             int&nbsp;max)</code>
<div class="block">Throws exception if the difference between max and min is
 Integer.MAX_VALUE or more.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static void</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#permutationCheck(java.util.List)">permutationCheck</a></strong>(java.util.List&lt;java.lang.Integer&gt;&nbsp;perm)</code>
<div class="block">Throws exception if the input list is not a permutation.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static java.util.Set&lt;java.util.List&lt;java.lang.Integer&gt;&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#permutationCycles(java.util.List)">permutationCycles</a></strong>(java.util.List&lt;java.lang.Integer&gt;&nbsp;inputPerm)</code>
<div class="block">Decomposes a permutation into a set of independent cycles.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static int</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#permutationOrder(java.util.List)">permutationOrder</a></strong>(java.util.List&lt;java.lang.Integer&gt;&nbsp;inputPerm)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static int</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#permutationOrder(java.util.Set)">permutationOrder</a></strong>(java.util.Set&lt;java.util.List&lt;java.lang.Integer&gt;&gt;&nbsp;cycles)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static void</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#positiveCheck(int)">positiveCheck</a></strong>(int&nbsp;a)</code>
<div class="block">Throws exception if a < 1.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static boolean</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#primitiveRootsExist(int)">primitiveRootsExist</a></strong>(int&nbsp;m)</code>&nbsp;</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static java.util.List&lt;java.lang.Integer&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#quadraticCongruenceGeneral(int, int, int, int)">quadraticCongruenceGeneral</a></strong>(int&nbsp;a,
                          int&nbsp;b,
                          int&nbsp;c,
                          int&nbsp;m)</code>
<div class="block">Solves the quadratic congruence of form ax^2 + bx + c â‰¡ 0 (mod m).</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static java.util.List&lt;java.lang.Integer&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#quadraticCongruenceGeneralGenerate(java.util.List, int)">quadraticCongruenceGeneralGenerate</a></strong>(java.util.List&lt;java.lang.Integer&gt;&nbsp;subResult,
                                  int&nbsp;m)</code>
<div class="block">Generates a solution for quadratic congruence of form ax^2 + bx + c â‰¡ 0
 (mod m) from its sub-result.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static java.util.List&lt;java.lang.Integer&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#quadraticCongruenceSimple(int, int)">quadraticCongruenceSimple</a></strong>(int&nbsp;a,
                         int&nbsp;m)</code>
<div class="block">Solves the quadratic congruence of form x^2 â‰¡ a (mod m).</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static <a href="../../../../cz/muni/fi/Numbermat/Pair.html" title="class in cz.muni.fi.Numbermat">Pair</a>&lt;java.lang.Integer,java.lang.Integer&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#randCoprime(int, int)">randCoprime</a></strong>(int&nbsp;min,
           int&nbsp;max)</code>
<div class="block">Generates a pseudo-random pair of coprime integers between 'min' and 'max', inclusive.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static int</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#randInt(int, int)">randInt</a></strong>(int&nbsp;min,
       int&nbsp;max)</code>
<div class="block">Generates a pseudo-random integer between 'min' and 'max', inclusive.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static int</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#randInt(int, int, boolean)">randInt</a></strong>(int&nbsp;min,
       int&nbsp;max,
       boolean&nbsp;zero)</code>
<div class="block">Generates a pseudo-random integer between 'min' and 'max', inclusive.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static java.util.List&lt;java.lang.Integer&gt;</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#randPermutation(int)">randPermutation</a></strong>(int&nbsp;size)</code>
<div class="block">Generates a random permutation of given size</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static int</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#randPrime(int, int)">randPrime</a></strong>(int&nbsp;min,
         int&nbsp;max)</code>
<div class="block">Generates a pseudo-random prime between 'min' and 'max', inclusive.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>static int</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#randPrime(int, int, boolean)">randPrime</a></strong>(int&nbsp;min,
         int&nbsp;max,
         boolean&nbsp;odd)</code>
<div class="block">Generates a pseudo-random prime between 'min' and 'max', inclusive.</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>static int</code></td>
<td class="colLast"><code><strong><a href="../../../../cz/muni/fi/Numbermat/Algorithms.html#unitGroupElementOrder(int, int)">unitGroupElementOrder</a></strong>(int&nbsp;element,
                     int&nbsp;n)</code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods_inherited_from_class_java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->
<ul class="blockList">
<li class="blockList"><a name="field_detail">
<!--   -->
</a>
<h3>Field Detail</h3>
<a name="FOR_LOOP_ATTEMPTS">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>FOR_LOOP_ATTEMPTS</h4>
<pre>public static final&nbsp;int FOR_LOOP_ATTEMPTS</pre>
<div class="block">FOR loops upper limit.</div>
<dl><dt><span class="strong">See Also:</span></dt><dd><a href="../../../../constant-values.html#cz.muni.fi.Numbermat.Algorithms.FOR_LOOP_ATTEMPTS">Constant Field Values</a></dd></dl>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method_detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="isPrime(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isPrime</h4>
<pre>public static&nbsp;boolean&nbsp;isPrime(int&nbsp;n)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>n</code> - Integer</dd>
<dt><span class="strong">Returns:</span></dt><dd>Is 'n' prime?</dd></dl>
</li>
</ul>
<a name="isCoprime(int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isCoprime</h4>
<pre>public static&nbsp;boolean&nbsp;isCoprime(int&nbsp;a,
                int&nbsp;b)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - Integer</dd><dd><code>b</code> - Integer</dd>
<dt><span class="strong">Returns:</span></dt><dd>Are 'a', 'b' coprime integers?</dd></dl>
</li>
</ul>
<a name="isPowerOf2(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isPowerOf2</h4>
<pre>public static&nbsp;boolean&nbsp;isPowerOf2(int&nbsp;n)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>n</code> - Integer</dd>
<dt><span class="strong">Returns:</span></dt><dd>Is 'n' a power of 2?</dd></dl>
</li>
</ul>
<a name="isPowerOf4(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isPowerOf4</h4>
<pre>public static&nbsp;boolean&nbsp;isPowerOf4(int&nbsp;n)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>n</code> - Integer</dd>
<dt><span class="strong">Returns:</span></dt><dd>Is 'n' a power of 4?</dd></dl>
</li>
</ul>
<a name="getNumberOfBits(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getNumberOfBits</h4>
<pre>public static&nbsp;int&nbsp;getNumberOfBits(int&nbsp;n)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>n</code> - Integer</dd>
<dt><span class="strong">Returns:</span></dt><dd>Number of bits needed to express 'n' in binary</dd></dl>
</li>
</ul>
<a name="randInt(int, int, boolean)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>randInt</h4>
<pre>public static&nbsp;int&nbsp;randInt(int&nbsp;min,
          int&nbsp;max,
          boolean&nbsp;zero)</pre>
<div class="block">Generates a pseudo-random integer between 'min' and 'max', inclusive.
 The difference between min and max can be at most Integer.MAX_VALUE - 1.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>min</code> - Minimum value</dd><dd><code>max</code> - Maximum value >= min</dd><dd><code>zero</code> - Is zero allowed?</dd>
<dt><span class="strong">Returns:</span></dt><dd>Integer in range [min, max]</dd></dl>
</li>
</ul>
<a name="randInt(int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>randInt</h4>
<pre>public static&nbsp;int&nbsp;randInt(int&nbsp;min,
          int&nbsp;max)</pre>
<div class="block">Generates a pseudo-random integer between 'min' and 'max', inclusive.
 The difference between min and max can be at most Integer.MAX_VALUE - 1.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>min</code> - Minimum value</dd><dd><code>max</code> - Maximum value >= min</dd>
<dt><span class="strong">Returns:</span></dt><dd>Integer in range [min, max]</dd></dl>
</li>
</ul>
<a name="randPrime(int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>randPrime</h4>
<pre>public static&nbsp;int&nbsp;randPrime(int&nbsp;min,
            int&nbsp;max)</pre>
<div class="block">Generates a pseudo-random prime between 'min' and 'max', inclusive.
 The difference between min and max can be at most Integer.MAX_VALUE - 1.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>min</code> - Minimum value. Non-negative integer.</dd><dd><code>max</code> - Maximum value >= min. Cannot be smaller than 2.</dd>
<dt><span class="strong">Returns:</span></dt><dd>Prime in range [min, max]</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code>java.lang.RuntimeException</code> - If a prime cannot be generated in given range</dd></dl>
</li>
</ul>
<a name="randPrime(int, int, boolean)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>randPrime</h4>
<pre>public static&nbsp;int&nbsp;randPrime(int&nbsp;min,
            int&nbsp;max,
            boolean&nbsp;odd)</pre>
<div class="block">Generates a pseudo-random prime between 'min' and 'max', inclusive.
 The difference between min and max can be at most Integer.MAX_VALUE - 1.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>min</code> - Minimum value. Non-negative integer.</dd><dd><code>max</code> - Maximum value >= min. Cannot be smaller than 2.</dd><dd><code>odd</code> - Generate only odd primes</dd>
<dt><span class="strong">Returns:</span></dt><dd>Prime in range [min, max]</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code>java.lang.RuntimeException</code> - If a prime cannot be generated in given range</dd></dl>
</li>
</ul>
<a name="randCoprime(int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>randCoprime</h4>
<pre>public static&nbsp;<a href="../../../../cz/muni/fi/Numbermat/Pair.html" title="class in cz.muni.fi.Numbermat">Pair</a>&lt;java.lang.Integer,java.lang.Integer&gt;&nbsp;randCoprime(int&nbsp;min,
                                                    int&nbsp;max)</pre>
<div class="block">Generates a pseudo-random pair of coprime integers between 'min' and 'max', inclusive.
 The difference between min and max can be at most Integer.MAX_VALUE - 1.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>min</code> - Minimum value. Non-negative integer.</dd><dd><code>max</code> - Maximum value >= min</dd>
<dt><span class="strong">Returns:</span></dt><dd>Pair of coprime integers in range [min, max]</dd>
<dt><span class="strong">Throws:</span></dt>
<dd><code>java.lang.RuntimeException</code> - If a pair of coprimes cannot be generated in given range</dd></dl>
</li>
</ul>
<a name="gcd(int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>gcd</h4>
<pre>public static&nbsp;int&nbsp;gcd(int&nbsp;a,
      int&nbsp;b)</pre>
<div class="block">Euclidean algorithm for finding the greatest common divisor of two integers.
 See Handbook of Applied Cryptography, sec. 2.4, page 66 for details.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - Integer</dd><dd><code>b</code> - Integer</dd>
<dt><span class="strong">Returns:</span></dt><dd>gcd(a, b)</dd></dl>
</li>
</ul>
<a name="lcm(int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>lcm</h4>
<pre>public static&nbsp;int&nbsp;lcm(int&nbsp;a,
      int&nbsp;b)</pre>
<div class="block">Least common multiple of two positive integers.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - Positive integer</dd><dd><code>b</code> - Positive integer</dd>
<dt><span class="strong">Returns:</span></dt><dd>lcm(a, b)</dd></dl>
</li>
</ul>
<a name="bezout(int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>bezout</h4>
<pre>public static&nbsp;java.util.List&lt;java.lang.Integer&gt;&nbsp;bezout(int&nbsp;a,
                                       int&nbsp;b)</pre>
<div class="block">Extended Euclidean algorithm for solving Bezout's identity.
 This algorithm is also useful for finding multiplicative inverses mod n.
 See Handbook of Applied Cryptography, sec. 2.4, pages 67 and 71 for details.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - Non-negative integer, a >= b</dd><dd><code>b</code> - Non-negative integer</dd>
<dt><span class="strong">Returns:</span></dt><dd>List [d, x, y] where d = gcd(a, b) and x, y such that ax + by = d</dd></dl>
</li>
</ul>
<a name="divisors(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>divisors</h4>
<pre>public static&nbsp;java.util.List&lt;java.lang.Integer&gt;&nbsp;divisors(int&nbsp;n)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>n</code> - Non-zero integer</dd>
<dt><span class="strong">Returns:</span></dt><dd>List of all positive divisors of 'n' in ascending order</dd></dl>
</li>
</ul>
<a name="commonDivisors(int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>commonDivisors</h4>
<pre>public static&nbsp;java.util.List&lt;java.lang.Integer&gt;&nbsp;commonDivisors(int&nbsp;a,
                                               int&nbsp;b)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - Non-zero integer</dd><dd><code>b</code> - Non-zero integer</dd>
<dt><span class="strong">Returns:</span></dt><dd>List of all positive divisors of both a and b in ascending order</dd></dl>
</li>
</ul>
<a name="factorize(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>factorize</h4>
<pre>public static&nbsp;java.util.List&lt;<a href="../../../../cz/muni/fi/Numbermat/Pair.html" title="class in cz.muni.fi.Numbermat">Pair</a>&lt;java.lang.Integer,java.lang.Integer&gt;&gt;&nbsp;factorize(int&nbsp;n)</pre>
<div class="block">Prime factorization.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>n</code> - Non-negative integer</dd>
<dt><span class="strong">Returns:</span></dt><dd>List of pairs (factor, exponent)</dd></dl>
</li>
</ul>
<a name="eulerPhi(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>eulerPhi</h4>
<pre>public static&nbsp;int&nbsp;eulerPhi(int&nbsp;n)</pre>
<div class="block">Euler's totient (phi) function.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>n</code> - Positive integer</dd>
<dt><span class="strong">Returns:</span></dt><dd>Value of Euler's totient function for n</dd></dl>
</li>
</ul>
<a name="normalizeIntModulo(int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>normalizeIntModulo</h4>
<pre>public static&nbsp;int&nbsp;normalizeIntModulo(int&nbsp;a,
                     int&nbsp;n)</pre>
<div class="block">Mods 'a' to closest positive integer modulo 'n'.
 Example: -74 % 5 = -4 % 5 = 1</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - Integer</dd><dd><code>n</code> - Positive integer</dd>
<dt><span class="strong">Returns:</span></dt><dd>a % n, smallest possible positive solution</dd></dl>
</li>
</ul>
<a name="linearCongruence(int, int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>linearCongruence</h4>
<pre>public static&nbsp;<a href="../../../../cz/muni/fi/Numbermat/Pair.html" title="class in cz.muni.fi.Numbermat">Pair</a>&lt;java.lang.Integer,java.lang.Integer&gt;&nbsp;linearCongruence(int&nbsp;a,
                                                         int&nbsp;b,
                                                         int&nbsp;n)</pre>
<div class="block">Solving a congruence ax â‰¡ b (mod n).</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - Integer</dd><dd><code>b</code> - Integer</dd><dd><code>n</code> - Positive integer</dd>
<dt><span class="strong">Returns:</span></dt><dd>Pair (solution, modulus) OR empty pair if no solutions exist
 OR pair (0, 1) if infinite solutions exist.</dd></dl>
</li>
</ul>
<a name="linearCongruenceSystem(int, java.util.List, java.util.List, java.util.List)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>linearCongruenceSystem</h4>
<pre>public static&nbsp;<a href="../../../../cz/muni/fi/Numbermat/Pair.html" title="class in cz.muni.fi.Numbermat">Pair</a>&lt;java.lang.Integer,java.lang.Integer&gt;&nbsp;linearCongruenceSystem(int&nbsp;count,
                                                               java.util.List&lt;java.lang.Integer&gt;&nbsp;aInList,
                                                               java.util.List&lt;java.lang.Integer&gt;&nbsp;bInList,
                                                               java.util.List&lt;java.lang.Integer&gt;&nbsp;nInList)</pre>
<div class="block">Solving a system of 'i' congruences of type a_i x â‰¡ b_i (mod n_i).
 See http://en.wikipedia.org/wiki/Linear_congruence_theorem#System_of_linear_congruences</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>count</code> - Number of equations, positive integer</dd><dd><code>aInList</code> - List of integers</dd><dd><code>bInList</code> - List of integers</dd><dd><code>nInList</code> - List of positive integers</dd>
<dt><span class="strong">Returns:</span></dt><dd>Pair (solution, modulus) OR empty pair if no solutions exist
 OR pair (0, 1) if infinite solutions exist.</dd></dl>
</li>
</ul>
<a name="elementsOfUnitGroup(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>elementsOfUnitGroup</h4>
<pre>public static&nbsp;java.util.List&lt;java.lang.Integer&gt;&nbsp;elementsOfUnitGroup(int&nbsp;n)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>n</code> - Integer > 1</dd>
<dt><span class="strong">Returns:</span></dt><dd>List of elements of unit group Zn^Ã— in ascending order</dd></dl>
</li>
</ul>
<a name="unitGroupElementOrder(int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>unitGroupElementOrder</h4>
<pre>public static&nbsp;int&nbsp;unitGroupElementOrder(int&nbsp;element,
                        int&nbsp;n)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>element</code> - Positive integer</dd><dd><code>n</code> - Integer > 1</dd>
<dt><span class="strong">Returns:</span></dt><dd>Order of element 'element' in group ZnÃ—</dd></dl>
</li>
</ul>
<a name="modPow(int, int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>modPow</h4>
<pre>public static&nbsp;int&nbsp;modPow(int&nbsp;base,
         int&nbsp;exp,
         int&nbsp;mod)</pre>
<div class="block">Modular exponentiation.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>base</code> - Integer</dd><dd><code>exp</code> - Non-negative integer</dd><dd><code>mod</code> - Positive integer</dd>
<dt><span class="strong">Returns:</span></dt><dd>(base^exp) mod (mod)</dd></dl>
</li>
</ul>
<a name="legendreSymbol(int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>legendreSymbol</h4>
<pre>public static&nbsp;int&nbsp;legendreSymbol(int&nbsp;a,
                 int&nbsp;p)</pre>
<div class="block">Computes the Legendre Symbol.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - Integer</dd><dd><code>p</code> - Odd prime</dd>
<dt><span class="strong">Returns:</span></dt><dd>1, 0 or -1</dd></dl>
</li>
</ul>
<a name="isPerfectSquare(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isPerfectSquare</h4>
<pre>public static&nbsp;boolean&nbsp;isPerfectSquare(int&nbsp;n)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>n</code> - Integer</dd>
<dt><span class="strong">Returns:</span></dt><dd>Is given integer a square of another integer?</dd></dl>
</li>
</ul>
<a name="findHighestPowerLessThan(int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>findHighestPowerLessThan</h4>
<pre>public static&nbsp;int&nbsp;findHighestPowerLessThan(int&nbsp;base,
                           int&nbsp;limit)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>base</code> - Integer > 1</dd><dd><code>limit</code> - Integer > 1</dd>
<dt><span class="strong">Returns:</span></dt><dd>The highest power of 'base' smaller than 'limit'</dd></dl>
</li>
</ul>
<a name="findNextHigherPowerOf4(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>findNextHigherPowerOf4</h4>
<pre>public static&nbsp;int&nbsp;findNextHigherPowerOf4(int&nbsp;start)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>start</code> - Integer</dd>
<dt><span class="strong">Returns:</span></dt><dd>The next power of 4 from 'start'
 or start itself if it is a power of 4</dd></dl>
</li>
</ul>
<a name="quadraticCongruenceSimple(int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>quadraticCongruenceSimple</h4>
<pre>public static&nbsp;java.util.List&lt;java.lang.Integer&gt;&nbsp;quadraticCongruenceSimple(int&nbsp;a,
                                                          int&nbsp;m)</pre>
<div class="block">Solves the quadratic congruence of form x^2 â‰¡ a (mod m).</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - Integer</dd><dd><code>m</code> - Positive integer</dd>
<dt><span class="strong">Returns:</span></dt><dd>List of solutions in ascending order ending with modulus,
 e.g. [x1, x2, ..., xn, m]</dd></dl>
</li>
</ul>
<a name="quadraticCongruenceGeneral(int, int, int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>quadraticCongruenceGeneral</h4>
<pre>public static&nbsp;java.util.List&lt;java.lang.Integer&gt;&nbsp;quadraticCongruenceGeneral(int&nbsp;a,
                                                           int&nbsp;b,
                                                           int&nbsp;c,
                                                           int&nbsp;m)</pre>
<div class="block">Solves the quadratic congruence of form ax^2 + bx + c â‰¡ 0 (mod m).</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - Integer</dd><dd><code>b</code> - Integer</dd><dd><code>c</code> - Integer</dd><dd><code>m</code> - Positive integer coprime with a</dd>
<dt><span class="strong">Returns:</span></dt><dd>List of solutions in ascending order ending with modulus, 
 e.g. [x1, x2, ..., xn, m]</dd></dl>
</li>
</ul>
<a name="quadraticCongruenceGeneralGenerate(java.util.List, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>quadraticCongruenceGeneralGenerate</h4>
<pre>public static&nbsp;java.util.List&lt;java.lang.Integer&gt;&nbsp;quadraticCongruenceGeneralGenerate(java.util.List&lt;java.lang.Integer&gt;&nbsp;subResult,
                                                                   int&nbsp;m)</pre>
<div class="block">Generates a solution for quadratic congruence of form ax^2 + bx + c â‰¡ 0
 (mod m) from its sub-result. Called only from quadraticCongruenceGeneral()
 and quadraticCongruenceGeneralSteps().</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>subResult</code> - Solution of simple quadratic congruence of form
 t^2 â‰¡ b*b - 4*a*c (mod 4*m)</dd><dd><code>m</code> - Input modulus m</dd>
<dt><span class="strong">Returns:</span></dt><dd>Solution for input quadratic congruence ax^2 + bx + c â‰¡ 0 (mod m)</dd></dl>
</li>
</ul>
<a name="primitiveRootsExist(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>primitiveRootsExist</h4>
<pre>public static&nbsp;boolean&nbsp;primitiveRootsExist(int&nbsp;m)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>m</code> - Integer > 1</dd>
<dt><span class="strong">Returns:</span></dt><dd>Do primitive roots mod m exist?</dd></dl>
</li>
</ul>
<a name="binomialCongruence(int, int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>binomialCongruence</h4>
<pre>public static&nbsp;java.util.List&lt;java.lang.Integer&gt;&nbsp;binomialCongruence(int&nbsp;n,
                                                   int&nbsp;a,
                                                   int&nbsp;m)</pre>
<div class="block">Solves the binomial congruence of form x^n â‰¡ a (mod m).</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>n</code> - Positive integer</dd><dd><code>a</code> - Integer</dd><dd><code>m</code> - Positive integer</dd>
<dt><span class="strong">Returns:</span></dt><dd>List of solutions modulo m in ascending order ending with modulus,
 e.g. [x1, x2, ..., xn, m]</dd></dl>
</li>
</ul>
<a name="generateModulus(boolean)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>generateModulus</h4>
<pre>public static&nbsp;int&nbsp;generateModulus(boolean&nbsp;odd)</pre>
<div class="block">Generates modulus for quadratic (simple and general) and binomial congruences.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>odd</code> - Allow only odd primes (do not allow even modulus 2*p)</dd>
<dt><span class="strong">Returns:</span></dt><dd>m which is a product of 2 different odd primes, min. 6, max. 95</dd></dl>
</li>
</ul>
<a name="permutationCycles(java.util.List)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>permutationCycles</h4>
<pre>public static&nbsp;java.util.Set&lt;java.util.List&lt;java.lang.Integer&gt;&gt;&nbsp;permutationCycles(java.util.List&lt;java.lang.Integer&gt;&nbsp;inputPerm)</pre>
<div class="block">Decomposes a permutation into a set of independent cycles.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>inputPerm</code> - Permutation (a subgroup of Sn for n >= 1)</dd>
<dt><span class="strong">Returns:</span></dt><dd>Independent cycles into which the input decomposes</dd></dl>
</li>
</ul>
<a name="permutationOrder(java.util.Set)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>permutationOrder</h4>
<pre>public static&nbsp;int&nbsp;permutationOrder(java.util.Set&lt;java.util.List&lt;java.lang.Integer&gt;&gt;&nbsp;cycles)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>cycles</code> - Permutation given by its independent cycles</dd>
<dt><span class="strong">Returns:</span></dt><dd>Order of a permutation</dd></dl>
</li>
</ul>
<a name="permutationOrder(java.util.List)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>permutationOrder</h4>
<pre>public static&nbsp;int&nbsp;permutationOrder(java.util.List&lt;java.lang.Integer&gt;&nbsp;inputPerm)</pre>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>inputPerm</code> - Permutation (a subgroup of Sn for n >= 1)</dd>
<dt><span class="strong">Returns:</span></dt><dd>Order of a permutation given by its cycles</dd></dl>
</li>
</ul>
<a name="randPermutation(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>randPermutation</h4>
<pre>public static&nbsp;java.util.List&lt;java.lang.Integer&gt;&nbsp;randPermutation(int&nbsp;size)</pre>
<div class="block">Generates a random permutation of given size</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>size</code> - Positive integer</dd>
<dt><span class="strong">Returns:</span></dt><dd>Permutation with 'size' elements</dd></dl>
</li>
</ul>
<a name="notLessThanCheck(int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>notLessThanCheck</h4>
<pre>public static&nbsp;void&nbsp;notLessThanCheck(int&nbsp;a,
                    int&nbsp;lowerBound)</pre>
<div class="block">Throws exception if a < lowerBound.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - Integer</dd><dd><code>lowerBound</code> - Integer</dd></dl>
</li>
</ul>
<a name="notNegativeCheck(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>notNegativeCheck</h4>
<pre>public static&nbsp;void&nbsp;notNegativeCheck(int&nbsp;a)</pre>
<div class="block">Throws exception if a is negative.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - Integer</dd></dl>
</li>
</ul>
<a name="positiveCheck(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>positiveCheck</h4>
<pre>public static&nbsp;void&nbsp;positiveCheck(int&nbsp;a)</pre>
<div class="block">Throws exception if a < 1.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - Integer</dd></dl>
</li>
</ul>
<a name="notGreaterThanCheck(int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>notGreaterThanCheck</h4>
<pre>public static&nbsp;void&nbsp;notGreaterThanCheck(int&nbsp;a,
                       int&nbsp;upperBound)</pre>
<div class="block">Throws exception if a > upperBound.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - Integer</dd><dd><code>upperBound</code> - Integer</dd></dl>
</li>
</ul>
<a name="notZeroCheck(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>notZeroCheck</h4>
<pre>public static&nbsp;void&nbsp;notZeroCheck(int&nbsp;a)</pre>
<div class="block">Throws exception if a == 0.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - Integer</dd></dl>
</li>
</ul>
<a name="isPrimeCheck(int, boolean)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isPrimeCheck</h4>
<pre>public static&nbsp;void&nbsp;isPrimeCheck(int&nbsp;a,
                boolean&nbsp;odd)</pre>
<div class="block">Throws exception if a is not prime.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - Integer</dd><dd><code>odd</code> - Should 'a' be odd?</dd></dl>
</li>
</ul>
<a name="isCoprimeCheck(int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isCoprimeCheck</h4>
<pre>public static&nbsp;void&nbsp;isCoprimeCheck(int&nbsp;a,
                  int&nbsp;b)</pre>
<div class="block">Throws exception if a, b are not coprime.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>a</code> - Integer</dd><dd><code>b</code> - Integer</dd></dl>
</li>
</ul>
<a name="listCheck(int, java.util.List)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>listCheck</h4>
<pre>public static&nbsp;void&nbsp;listCheck(int&nbsp;count,
             java.util.List&lt;java.lang.Integer&gt;&nbsp;inputList)</pre>
<div class="block">Throws exception if size of inputList is different than count</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>count</code> - Non-negative integer</dd><dd><code>inputList</code> - List of integers</dd></dl>
</li>
</ul>
<a name="overflowCheck(int, int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>overflowCheck</h4>
<pre>public static&nbsp;void&nbsp;overflowCheck(int&nbsp;min,
                 int&nbsp;max)</pre>
<div class="block">Throws exception if the difference between max and min is
 Integer.MAX_VALUE or more.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>min</code> - Integer</dd><dd><code>max</code> - Integer >= min</dd></dl>
</li>
</ul>
<a name="permutationCheck(java.util.List)">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>permutationCheck</h4>
<pre>public static&nbsp;void&nbsp;permutationCheck(java.util.List&lt;java.lang.Integer&gt;&nbsp;perm)</pre>
<div class="block">Throws exception if the input list is not a permutation.</div>
<dl><dt><span class="strong">Parameters:</span></dt><dd><code>perm</code> - List of integers</dd></dl>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar_bottom">
<!--   -->
</a><a href="#skip-navbar_bottom" title="Skip navigation links"></a><a name="navbar_bottom_firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/Algorithms.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../../../../deprecated-list.html">Deprecated</a></li>
<li><a href="../../../../index-files/index-1.html">Index</a></li>
<li><a href="../../../../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>Prev Class</li>
<li><a href="../../../../cz/muni/fi/Numbermat/AlgorithmsSteps.html" title="class in cz.muni.fi.Numbermat"><span class="strong">Next Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../../../../index.html?cz/muni/fi/Numbermat/Algorithms.html" target="_top">Frames</a></li>
<li><a href="Algorithms.html" target="_top">No Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../../../../allclasses-noframe.html">All Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field_summary">Field</a>&nbsp;|&nbsp;</li>
<li>Constr&nbsp;|&nbsp;</li>
<li><a href="#method_summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field_detail">Field</a>&nbsp;|&nbsp;</li>
<li>Constr&nbsp;|&nbsp;</li>
<li><a href="#method_detail">Method</a></li>
</ul>
</div>
<a name="skip-navbar_bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>
