package Numbermat;

import Numbermat.GUI.MainFrame;
import Numbermat.GUI.utils.Configuration;
import Numbermat.GUI.utils.UserInputChecker;
import de.nixosoft.jlr.JLRGenerator;
import de.nixosoft.jlr.JLROpener;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Insets;
import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Timestamp;
import java.util.ArrayList;
import javax.swing.JLabel;
import org.scilab.forge.jlatexmath.TeXConstants;
import org.scilab.forge.jlatexmath.TeXFormula;
import org.scilab.forge.jlatexmath.TeXIcon;

/**
 *
 * @author Valdemar Svabensky <395868@mail.muni.cz>
 */
public final class Utils {
    
    public static final String NEWLINE = System.lineSeparator();
    
    /**
     * Processes a LaTeX texFile to create an image of the formula.
     * Created image can be rendered or saved with ImageIO.
     * 
     * @param LaTeXInput Plaintext formula in LaTeX syntax
     * @return Image containing formula processed by LaTeX, ready to be rendered
     */
    public static BufferedImage createLaTeXImage(String LaTeXInput) {
        try {
            TeXFormula formula = new TeXFormula(LaTeXInput);
            TeXIcon icon = formula.createTeXIcon(TeXConstants.STYLE_DISPLAY, 20);
            icon.setInsets(new Insets(5, 5, 5, 5)); // Borders

            BufferedImage image = new BufferedImage(
                    icon.getIconWidth(),
                    icon.getIconHeight(),
                    BufferedImage.TYPE_INT_ARGB);
            
            Graphics2D g2 = image.createGraphics();
            g2.setColor(Color.white);
            g2.fillRect(0, 0, icon.getIconWidth(), icon.getIconHeight());
            
            JLabel jl = new JLabel();
            jl.setForeground(new Color(0, 0, 0));
            icon.paintIcon(jl, g2, 0, 0);
            return image;
        } catch (Exception ex) {
            System.err.println(ex.getMessage());
            return null;
        }
    }
    
    /**
     * Writes .tex file with mathematical problem and its solution on disk
     * 
     * @param file File to be written to
     * @param problem
     * @param solution
     */
    public static void writeTeXFile(File file, String problem, String solution) {
        BufferedWriter writer = null;
        try {
            writer = new BufferedWriter(new FileWriter(file));
            writer.write("\\documentclass[12pt,a4paper,oneside,leqno]{article}");
            writer.newLine();
            writer.write("\\usepackage[utf8]{inputenc}");
            writer.newLine();
            writer.write("\\usepackage[czech]{babel}");
            writer.newLine();
            writer.write("\\usepackage[T1]{fontenc}");
            writer.newLine();
            writer.write("\\usepackage{amsmath}");
            writer.newLine();
            writer.write("\\usepackage{amsfonts}");
            writer.newLine();
            writer.write("\\usepackage{amssymb}");
            writer.newLine();
            writer.write("\\begin{document}");
            writer.newLine();
            writer.write("\\noindent Zad\\'an\\'i:");
            writer.newLine();
            writer.write(prepareUnicodeForLaTeX(problem));
            writer.newLine();
            writer.write("\\vfill");
            writer.newLine();
            writer.write("\\noindent \\v{R}e\\v{s}en\\'i:");
            writer.newLine();
            writer.write(prepareUnicodeForLaTeX(solution));
            writer.newLine();
            writer.write("\\end{document}");
        }
        catch(IOException ex) {
            System.err.println(ex.getMessage());
        }
        finally {
            try {
                if (writer != null)
                    writer.close();
            } catch (IOException ex) {
                System.err.println(ex.getMessage());
            }
        }
    }
    
    private static String prepareUnicodeForLaTeX(String input) {
        String result = input.replaceAll("á", "\\\\'a");
        result = result.replaceAll("é", "\\\\'e");
        result = result.replaceAll("í", "\\\\'i");
        result = result.replaceAll("ó", "\\\\'o");
        result = result.replaceAll("ú", "\\\\'u");
        result = result.replaceAll("ý", "\\\\'y");
        return result;
    }
    
    /**
     * Writes .tex file with mathematical problem and its solution on disk.
     * Runs pdfLaTeX on written file and opens .pdf automatically.
     * 
     * @param pdfLaTeX Executable pdfLaTeX binary or null for default TeX installation
     * @param workingDir Directory to be written to
     * @param problem
     * @param solution
     * @param mainFrame Program frame for error messages
     */
    public static void exportPDF(File pdfLaTeX, File workingDir, String problem, String solution, MainFrame mainFrame) {
        final java.util.Date date = new java.util.Date();
        final String timestamp = new Timestamp(date.getTime()).toString();
        
        StringBuilder fileName = new StringBuilder(workingDir.getAbsolutePath());
        fileName.append(File.separator).append("priklad ");
        fileName.append(timestamp.replaceAll(":", "-")).append(".tex");
        File texFile = new File(fileName.toString());
        writeTeXFile(texFile, problem, solution);
        try {
            JLRGenerator pdfGenerator = new JLRGenerator();
            pdfGenerator.deleteTempFiles(false, true, true);
            if (pdfLaTeX == null) {
                if (pdfGenerator.generate(texFile, workingDir, workingDir))
                    JLROpener.open(pdfGenerator.getPDF());
            } else {
                if (pdfGenerator.generate(pdfLaTeX, 1, texFile, workingDir, workingDir)) 
                    JLROpener.open(pdfGenerator.getPDF());
            }
            
            if (!pdfGenerator.getErrorMessage().equals("No errors occurred!")) {
                UserInputChecker.error(mainFrame,
                        "Překlad PDFLaTeXem zlyhal. Soubor: " + Configuration.getPDFLaTeXFile().getAbsolutePath(),
                        "Chyba při exportu do PDF");
                System.err.println(pdfGenerator.getErrorMessage());
            }
        } catch (IOException ex) {
            UserInputChecker.error(mainFrame,
                    "Překlad PDFLaTeXem zlyhal. Soubor: " + Configuration.getPDFLaTeXFile().getAbsolutePath(),
                    "Chyba při exportu do PDF");
            System.err.println(ex.getMessage());
        }
    }
    
    /**
     * Replaces last occurrence of a substring in a string with given replacement.
     * 
     * @param string
     * @param substring
     * @param replacement
     * @return String with replacement
     */
    public static String replaceLast(String string, String substring, String replacement) {
        int index = string.lastIndexOf(substring);
        if (index == -1)
            return string;
        return string.substring(0, index) + replacement
                + string.substring(index+substring.length());
    }
    
    public static void insertLaTeXNewlineSymbol(StringBuilder sb, int beginning, boolean addExtraLine) {
        int newlineIndex = sb.indexOf(NEWLINE, beginning);
        while (newlineIndex < sb.lastIndexOf(NEWLINE)) {
            sb.insert(newlineIndex, "\\\\");
            newlineIndex = sb.indexOf(NEWLINE, newlineIndex + 3);
        }
        if (addExtraLine)
            sb.insert(newlineIndex, "\\\\");
    }

    public static Integer[] buildIntegerArray(ArrayList<Integer> integers) {
        return integers.toArray(new Integer[integers.size()]);
    }
}
