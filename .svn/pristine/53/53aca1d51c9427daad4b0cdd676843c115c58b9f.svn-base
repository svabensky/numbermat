package Numbermat.Problems;

import Numbermat.Utils;
import Numbermat.Algorithms;
import Numbermat.AlgorithmsSteps;

/**
 *
 * @author Valdemar Svabensky <395868@mail.muni.cz>
 */
public final class BezoutProblem extends MathProblem {
    
    private GCDProblem gcdProblem;
    private int a;
    private int b;
    
    public BezoutProblem(final String difficulty, boolean coprimeNumbers) {
        gcdProblem = new GCDProblem(difficulty, coprimeNumbers);
        setVariables();
    }
    
    public BezoutProblem(final int n1, final int n2) {
        gcdProblem = new GCDProblem(n1, n2);
        setVariables();
    }
    
    private void setVariables() {
        a = gcdProblem.getA();
        b = gcdProblem.getB();
        result = Algorithms.bezout(gcdProblem.getA(), gcdProblem.getB());
        prepareAll();
    }

    public GCDProblem getGcdProblem() {
        return gcdProblem;
    }

    @Override
    protected void prepareProblemPlaintext() {
        final StringBuilder sb = new StringBuilder();
        sb.append("Nalezněte čísla d, x, y, aby").append(Utils.NEWLINE);
        sb.append(a).append("x + ").append(b).append("y = d").append(Utils.NEWLINE);
        problemPlaintext = sb.toString();
    }

    @Override
    protected void prepareProblemLaTeX() {
        final StringBuilder sb = new StringBuilder();
        sb.append("\\text{Nalezn\\v{e}te \\v{c}ísla }$d, x, y$, \\text{aby}\\\\ \\[");
        sb.append(a).append("x + ").append(b).append("y = d\\] \\\\");
        problemLaTeX = sb.toString();
    }

    @Override
    protected void prepareSolutionPlaintext() {
        final String solutionGCD = gcdProblem.getSolutionPlaintext();
        final String solutionBezout = AlgorithmsSteps.bezoutSteps(a, b);
        solutionPlaintext = new StringBuilder().append(solutionGCD).append(solutionBezout).toString();
    }

    @Override
    protected void prepareSolutionLaTeX() {
        // This method does not use Utils.prepareAlignMath() !
        String solutionBezout = AlgorithmsSteps.bezoutSteps(a, b);
        solutionBezout = Utils.prepareBasicMath(solutionBezout);
        solutionBezout = solutionBezout.replaceAll("=", "&=");
        solutionBezout = Utils.replaceLast(solutionBezout, "&=", "=");
        
        String solutionGCD = gcdProblem.getSolutionLaTeX();
        int newLineReplacementPosition = solutionGCD.lastIndexOf("{align}") + 9;
        solutionGCD = Utils.replaceLast(solutionGCD, Utils.NEWLINE + "\\end{align}", "\\\\");
        
        final StringBuilder sb = new StringBuilder().append(solutionGCD).append(solutionBezout);
        Utils.insertLaTeXNewlineSymbol(sb, newLineReplacementPosition, true);
        sb.append(Utils.NEWLINE).append("\\end{align}");
        solutionLaTeX = sb.toString();
    }
}
