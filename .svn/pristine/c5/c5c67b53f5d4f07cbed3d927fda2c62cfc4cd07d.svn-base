package Numbermat.Problems;

import Numbermat.Algorithms;
import Numbermat.Pair;
import Numbermat.Utils;
import java.util.ArrayList;
import java.util.List;

/**
 * System of 2, 3, or 4 linear congruences.
 * 
 * @author Valdemar Svabensky <395868@mail.muni.cz>
 */
public final class LinearCongruenceSystemProblem extends MathProblem {
    
    private int count;
    private List<Integer> aList;
    private List<Integer> bList;
    private List<Integer> nList;
    
    public LinearCongruenceSystemProblem(String difficulty) {
        easyBounds = new Pair(1, 49);
        mediumBounds = new Pair(50, 249);
        hardBounds = new Pair(250, 1000);
        
        Pair<Integer, Integer> bounds = initBounds(difficulty);
        int lowerBound = bounds.getFirst();
        int upperBound = bounds.getSecond();
        
        int count1;
        switch (difficulty) {
            case "Lehká" : count1 = 2; break;
            case "Střední" : count1 = 3; break;
            case "Těžká" : count1 = 4; break;
            default: throw new IllegalArgumentException("Unknown difficulty.");
        }
        List<Integer> aList1;
        List<Integer> bList1;
        List<Integer> nList1;
        
        while (true) {
            aList1 = new ArrayList<>(count1);
            bList1 = new ArrayList<>(count1);
            nList1 = new ArrayList<>(count1);
            for (int i = 0; i < count1; ++i) {
                int a1 = Algorithms.randInt(lowerBound, upperBound, false);
                int b1 = Algorithms.randInt(lowerBound, upperBound, true);
                int n1 = Algorithms.randInt(lowerBound, upperBound, false);
                aList1.add(a1);
                bList1.add(b1);
                nList1.add(n1);
            }
            // If generated system has a solution
            if (!Algorithms.linearCongruenceSystem(count1, aList1, bList1, nList1).equals(new Pair<>()))
                break;
        }
        setVariables(count1, aList1, bList1, nList1);
    }
    
    public LinearCongruenceSystemProblem(int count1, List<Integer> aList1, List<Integer> bList1, List<Integer> nList1) {
        setVariables(count1, aList1, bList1, nList1);
    }
    
    private void setVariables(int count1, List<Integer> aList1, List<Integer> bList1, List<Integer> nList1) {
        count = count1;
        aList = new ArrayList<>(aList1);
        bList = new ArrayList<>(bList1);
        nList = new ArrayList<>(nList1);
        Pair<Integer, Integer> solution = Algorithms.linearCongruenceSystem(count, aList, bList, nList);
        result = new ArrayList(2);
        result.add(solution.getFirst());
        result.add(solution.getSecond());
        prepareAll();
    }
    
    @Override
    protected void prepareProblemPlaintext() {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < count; ++i) {
            sb.append(aList.get(i)).append("x ≡ ").append(bList.get(i));
            sb.append(" (mod ").append(nList.get(i)).append(")").append(Utils.NEWLINE);
        }
        problemPlaintext = sb.toString();
    }

    @Override
    protected void prepareProblemLaTeX() {
        StringBuilder sb = new StringBuilder("\\[");
        for (int i = 0; i < count; ++i) {
            sb.append(aList.get(i)).append("x \\equiv ").append(bList.get(i));
            sb.append(" \\pmod{").append(nList.get(i)).append("}\\\\").append(Utils.NEWLINE);
        }
        problemLaTeX = sb.append("\\]").toString();
    }

    @Override
    protected void prepareSolutionPlaintext() {
        solutionPlaintext = Algorithms.linearCongruenceSystemSteps(count, aList, bList, nList);
    }

    @Override
    protected void prepareSolutionLaTeX() {
        String solutionCopy = Utils.prepareAlignedMath(solutionPlaintext);
        solutionCopy = solutionCopy.replace("|", "\\mid");
        if (count > 1) {
            solutionCopy = solutionCopy.replaceAll("Substituujeme do", "&\\\\text{Substituujeme do }");
            solutionCopy = solutionCopy.replaceAll(". rovnice.", "\\\\text{. rovnice.}");
        }
        if (result.equals(new ArrayList<>())) {
            solutionCopy = solutionCopy.replace("∤", "\\nmid");
            solutionCopy = solutionCopy.replace("Kongruence", "&\\text{Kongruence");
            solutionCopy = solutionCopy.replace("řešení.", "řešení.}\\\\");
        }
        solutionLaTeX = solutionCopy;
    }
}
