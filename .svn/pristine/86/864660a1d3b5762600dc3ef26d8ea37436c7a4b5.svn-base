package Numbermat;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.*;
import static org.junit.Assert.*;

/**
 *
 * @author Valdemar Svabensky <395868@mail.muni.cz>
 */
public class AlgorithmsTests {
    
    @Test
    public void testIsPrime() {
        assertFalse(Algorithms.isPrime(0));
        assertFalse(Algorithms.isPrime(1));
        assertFalse(Algorithms.isPrime(4));
        assertFalse(Algorithms.isPrime(9));
        assertFalse(Algorithms.isPrime(341));
        assertFalse(Algorithms.isPrime(1234567890));
        assertTrue(Algorithms.isPrime(2));
        assertTrue(Algorithms.isPrime(3));
        assertTrue(Algorithms.isPrime(5));
        assertTrue(Algorithms.isPrime(97));
        assertTrue(Algorithms.isPrime(1500450271));
    }
    
    @Test
    public void testDivisors() {
        List<Integer> result, expected;
        
        result = Algorithms.divisors(2);
        expected = Arrays.asList(1, 2);
        assertTrue(result.equals(expected));
        
        result = Algorithms.divisors(28);
        expected = Arrays.asList(1, 2, 4, 7, 14, 28);
        assertTrue(result.equals(expected));
    }
    
    @Test
    public void testIsCoprime() {
        assertFalse(Algorithms.isCoprime(4864, 3458));
        assertTrue(Algorithms.isCoprime(1, 3458));
        assertTrue(Algorithms.isCoprime(1, 0));
        assertFalse(Algorithms.isCoprime(0, 0));
        
        try {
            Algorithms.isCoprime(-15, 15);
            fail();
        } catch (IllegalArgumentException ex) {
            //OK
        }
    }
    
    @Test
    public void testGCD() {
        int a = 4864;
        int b = 3458;
        int gcd = 38;
        assertTrue(Algorithms.gcd(a, b) == gcd);
        assertTrue(Algorithms.gcd(b, a) == gcd);
        
        assertTrue(Algorithms.gcd(1, b) == 1);
        assertTrue(Algorithms.gcd(1, 0) == 1);
        assertTrue(Algorithms.gcd(0, 0) == 0);
        
        try {
            Algorithms.gcd(-15, b);
            fail();
        } catch (IllegalArgumentException ex) {
            //OK
        }
    }
    
    @Test
    public void testBezout() {
        int a = 4864;
        int b = 3458;
        int gcd = 38;
        int x = 32;
        int y = -45;
        List<Integer> result, expected;
        
        result = Algorithms.bezout(a, b);
        expected = Arrays.asList(gcd, x, y);
        assertTrue(result.equals(expected));
        
        a = 15;
        b = 1;
        result = Algorithms.bezout(a, b);
        expected = Arrays.asList(1, 0, 1);
        assertTrue(result.equals(expected));
        
        result = Algorithms.bezout(a, 0);
        expected = Arrays.asList(a, 1, 0);
        assertTrue(result.equals(expected));
        
        result = Algorithms.bezout(0, 0);
        expected = Arrays.asList(0, 1, 0);
        assertTrue(result.equals(expected));
        
        try {
            Algorithms.bezout(a, -15);
            fail();
        } catch (IllegalArgumentException ex) {
            //OK
        }
        try {
            Algorithms.bezout(4, 15);
            fail();
        } catch (IllegalArgumentException ex) {
            //OK
        }
    }
    
    @Test
    public void testFactorize() {
        int n = 4864;
        ArrayList<Pair<Integer, Integer>> factors = new ArrayList<>();
        factors.add(new Pair(2, 8));
        factors.add(new Pair(19, 1));
        assertEquals(factors, Algorithms.factorize(n));
        
        n = 3458;
        factors = new ArrayList<>();
        factors.add(new Pair(2, 1));
        factors.add(new Pair(7, 1));
        factors.add(new Pair(13, 1));
        factors.add(new Pair(19, 1));
        assertEquals(factors, Algorithms.factorize(n));
        
        n = 1;
        factors = new ArrayList<>();
        factors.add(new Pair(1, 1));
        assertEquals(factors, Algorithms.factorize(n));
        
        n = 0;
        factors = new ArrayList<>();
        factors.add(new Pair(0, 1));
        assertEquals(factors, Algorithms.factorize(n));
        
        try {
            Algorithms.factorize(-15);
            fail();
        } catch (IllegalArgumentException ex) {
            //OK
        }
    }
    
    @Test
    public void testPhi() {
        int n = 4864;
        int phi = 2304;
        assertTrue(phi == Algorithms.eulerPhi(n));
        
        n = 3458;
        phi = 1296;
        assertTrue(phi == Algorithms.eulerPhi(n));
        
        n = 1;
        phi = 1;
        assertTrue(phi == Algorithms.eulerPhi(n));
        
        n = 0;
        phi = 0;
        assertTrue(phi == Algorithms.eulerPhi(n));
        
        try {
            Algorithms.eulerPhi(-15);
            fail();
        } catch (IllegalArgumentException ex) {
            //OK
        }
    }
    
    @Test
    public void testLinearCongruence() {
        Pair<Integer, Integer> result;
        Pair<Integer, Integer> expected;
        
        result = Algorithms.linearCongruence(12, 20, 28);
        expected = new Pair(4, 7);
        assertTrue(result.equals(expected));
        
        result = Algorithms.linearCongruence(21, 6, 9);
        expected = new Pair(2, 3);
        assertTrue(result.equals(expected));
        
        result = Algorithms.linearCongruence(11881376, 16, 11);
        expected = new Pair(5, 11);
        assertTrue(result.equals(expected));
        
        result = Algorithms.linearCongruence(26, 4, 9);
        expected = new Pair(5, 9);
        assertTrue(result.equals(expected));
        
        result = Algorithms.linearCongruence(76, 8, 10);
        expected = new Pair(3, 5);
        assertTrue(result.equals(expected));
        
        result = Algorithms.linearCongruence(5, 7, 8);
        expected = new Pair(3, 8);
        assertTrue(result.equals(expected));
        
        result = Algorithms.linearCongruence(16, 4, 6);
        expected = new Pair(1, 3);
        assertTrue(result.equals(expected));
        
        result = Algorithms.linearCongruence(4, 3, 7);
        expected = new Pair(6, 7);
        assertTrue(result.equals(expected));
        
        result = Algorithms.linearCongruence(642, 1844, 1144);
        expected = new Pair(10, 572);
        assertTrue(result.equals(expected));
        
        result = Algorithms.linearCongruence(3, 1, 6);
        expected = new Pair();
        assertTrue(result.equals(expected));
        
        result = Algorithms.linearCongruence(5, 4, 5);
        expected = new Pair();
        assertTrue(result.equals(expected));
        
        result = Algorithms.linearCongruence(5, 0, 5);
        expected = new Pair(Integer.MAX_VALUE, Integer.MAX_VALUE);
        assertTrue(result.equals(expected));
        
        result = Algorithms.linearCongruence(0, 3, 3);
        expected = new Pair(Integer.MAX_VALUE, Integer.MAX_VALUE);
        assertTrue(result.equals(expected));
    }
    
    @Test
    public void testLinearCongruenceSystem() {
        List<Integer> aList;
        List<Integer> bList;
        List<Integer> nList;
        Pair<Integer, Integer> result;
        Pair<Integer, Integer> expected;
        
        /* 2x = 2 (mod 6)
           3x = 2 (mod 7)
           2x = 4 (mod 8) */
        aList = new ArrayList<>(Arrays.asList(2, 3, 2));
        bList = new ArrayList<>(Arrays.asList(2, 2, 4));
        nList = new ArrayList<>(Arrays.asList(6, 7, 8));
        result = Algorithms.linearCongruenceSystem(3, aList, bList, nList);
        expected = new Pair(10, 84);
        assertTrue(result.equals(expected));
        
        aList = new ArrayList<>(Arrays.asList(1, 1));
        bList = new ArrayList<>(Arrays.asList(-5, 2));
        nList = new ArrayList<>(Arrays.asList(20, 13));
        result = Algorithms.linearCongruenceSystem(2, aList, bList, nList);
        expected = new Pair(15, 260);
        assertTrue(result.equals(expected));
        
        aList = new ArrayList<>(Arrays.asList(1, 1, 1));
        bList = new ArrayList<>(Arrays.asList(8, 5, 1));
        nList = new ArrayList<>(Arrays.asList(11, 8, 3));
        result = Algorithms.linearCongruenceSystem(3, aList, bList, nList);
        expected = new Pair(85, 264);
        assertTrue(result.equals(expected));
        
        aList = new ArrayList<>(Arrays.asList(729, 169, 32));
        bList = new ArrayList<>(Arrays.asList(343, 27, 1331));
        nList = new ArrayList<>(Arrays.asList(5, 7, 9));
        result = Algorithms.linearCongruenceSystem(3, aList, bList, nList);
        expected = new Pair(97, 315);
        assertTrue(result.equals(expected));
        
        aList = new ArrayList<>(Arrays.asList(1, 1));
        bList = new ArrayList<>(Arrays.asList(6, 2));
        nList = new ArrayList<>(Arrays.asList(8, 5));
        result = Algorithms.linearCongruenceSystem(2, aList, bList, nList);
        expected = new Pair(22, 40);
        assertTrue(result.equals(expected));        
        
        aList = new ArrayList<>(Arrays.asList(1, 1, 1));
        bList = new ArrayList<>(Arrays.asList(2, 4, 6));
        nList = new ArrayList<>(Arrays.asList(4, 6, 10));
        result = Algorithms.linearCongruenceSystem(3, aList, bList, nList);
        expected = new Pair(46, 60);
        assertTrue(result.equals(expected));
        
        aList = new ArrayList<>(Arrays.asList(2, 3, 5));
        bList = new ArrayList<>(Arrays.asList(3, 5, 7));
        nList = new ArrayList<>(Arrays.asList(5, 7, 9));
        result = Algorithms.linearCongruenceSystem(3, aList, bList, nList);
        expected = new Pair(284, 315);
        assertTrue(result.equals(expected));
        
        aList = new ArrayList<>(Arrays.asList(1, 1, 1));
        bList = new ArrayList<>(Arrays.asList(3, 2, 5));
        nList = new ArrayList<>(Arrays.asList(7, 11, 13));
        result = Algorithms.linearCongruenceSystem(3, aList, bList, nList);
        expected = new Pair(486, 1001);
        assertTrue(result.equals(expected));
        
        aList = new ArrayList<>(Arrays.asList(1, 1, 1));
        bList = new ArrayList<>(Arrays.asList(3, 1, -3));
        nList = new ArrayList<>(Arrays.asList(6, 5, 7));
        result = Algorithms.linearCongruenceSystem(3, aList, bList, nList);
        expected = new Pair(81, 210);
        assertTrue(result.equals(expected));
        
        /* Unsolvable */
        aList = new ArrayList<>(Arrays.asList(1, 1));
        bList = new ArrayList<>(Arrays.asList(3, 7));
        nList = new ArrayList<>(Arrays.asList(9, 15));
        result = Algorithms.linearCongruenceSystem(2, aList, bList, nList);
        expected = new Pair();
        assertTrue(result.equals(expected));
        
        aList = new ArrayList<>(Arrays.asList(1, 1));
        bList = new ArrayList<>(Arrays.asList(1, -1));
        nList = new ArrayList<>(Arrays.asList(3, 9));
        result = Algorithms.linearCongruenceSystem(2, aList, bList, nList);
        expected = new Pair();
        assertTrue(result.equals(expected));
        
        aList = new ArrayList<>(Arrays.asList(5));
        bList = new ArrayList<>(Arrays.asList(4));
        nList = new ArrayList<>(Arrays.asList(5));
        result = Algorithms.linearCongruenceSystem(1, aList, bList, nList);
        expected = new Pair();
        assertTrue(result.equals(expected));
        
        /* Infinite solutions */
        aList = new ArrayList<>(Arrays.asList(5));
        bList = new ArrayList<>(Arrays.asList(0));
        nList = new ArrayList<>(Arrays.asList(5));
        result = Algorithms.linearCongruenceSystem(1, aList, bList, nList);
        expected = new Pair(Integer.MAX_VALUE, Integer.MAX_VALUE);
        assertTrue(result.equals(expected));
        
        aList = new ArrayList<>(Arrays.asList(0));
        bList = new ArrayList<>(Arrays.asList(3));
        nList = new ArrayList<>(Arrays.asList(3));
        result = Algorithms.linearCongruenceSystem(1, aList, bList, nList);
        expected = new Pair(Integer.MAX_VALUE, Integer.MAX_VALUE);
        assertTrue(result.equals(expected));
        
        aList = new ArrayList<>(Arrays.asList(0, 7, 158));
        bList = new ArrayList<>(Arrays.asList(3, 14, 0));
        nList = new ArrayList<>(Arrays.asList(3, 7, 158));
        result = Algorithms.linearCongruenceSystem(3, aList, bList, nList);
        expected = new Pair(Integer.MAX_VALUE, Integer.MAX_VALUE);
        assertTrue(result.equals(expected));
        
        /* Unsolvable, but containting equation with infinite solutions */
        aList = new ArrayList<>(Arrays.asList(7, 158, 16));
        bList = new ArrayList<>(Arrays.asList(14, 0, 5));
        nList = new ArrayList<>(Arrays.asList(7, 158, 8));
        result = Algorithms.linearCongruenceSystem(3, aList, bList, nList);
        expected = new Pair();
        assertTrue(result.equals(expected));
        
        /* Solvable, but containting equation with infinite solutions */
        aList = new ArrayList<>(Arrays.asList(2, 1, 40));
        bList = new ArrayList<>(Arrays.asList(3, 4, 40));
        nList = new ArrayList<>(Arrays.asList(5, 5, 20));
        result = Algorithms.linearCongruenceSystem(3, aList, bList, nList);
        expected = new Pair(4, 5);
        assertTrue(result.equals(expected));
        
        aList = new ArrayList<>(Arrays.asList(40, 2, 1));
        bList = new ArrayList<>(Arrays.asList(40, 3, 4));
        nList = new ArrayList<>(Arrays.asList(20, 5, 5));
        result = Algorithms.linearCongruenceSystem(3, aList, bList, nList);
        expected = new Pair(4, 5);
        assertTrue(result.equals(expected));
    }
}

