package Numbermat;

/**
 * Contains methods to generate step-by-step solutions to computations in Algorithms class.
 * 
 * @author Valdemar Svabensky <395868@mail.muni.cz>
 */
public final class AlgorithmsSteps {
    
    private AlgorithmsSteps() {
        throw new IllegalStateException("AlgorithmsSteps class should not be instantiated.");
    }

    /**
     * Euclidean algorithm for finding the greatest common divisor of two integers.
     * @param a Integer
     * @param b Integer
     * @return Step-by-step solution with every partial computation
     */
    public static String gcdSteps(int a, int b) {
        StringBuilder sb = new StringBuilder().append(buildGCDEquals(a, b));
        if (a < 0) {
            if (b < 0)
                return sb.append(buildGCDNewline(-a, -b)).append(gcdSteps(-a, -b)).toString();
            else
                return sb.append(buildGCDNewline(-a, b)).append(gcdSteps(-a, b)).toString();
        } else if (b < 0)
            return sb.append(buildGCDNewline(a, -b)).append(gcdSteps(a, -b)).toString();
        if (a < b)
            return sb.append(buildGCDNewline(b, a)).append(gcdSteps(b, a)).toString();
        
        StringBuilder result = new StringBuilder();
        while (b > 0) {
            int r = a % b;
            result.append(a).append(" = ");
            result.append(a / b).append(" * ");
            result.append(b).append(" + ");
            result.append(r).append(Utils.NEWLINE);
            a = b;
            b = r;
        }
        return result.append(sb).append(a).toString();
    }
    
    private static StringBuilder buildGCD(int a, int b) {
        return new StringBuilder().append("(").append(a).append(", ").append(b).append(")");
    }
    
    private static StringBuilder buildGCDEquals(int a, int b) {
        return buildGCD(a, b).append(" = ");
    }
    
    private static StringBuilder buildGCDNewline(int a, int b) {
        return buildGCD(a, b).append(Utils.NEWLINE);
    }

    
}
