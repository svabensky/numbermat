package Numbermat.GUI;

import Numbermat.Problems.*;
import Numbermat.Utils;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.prefs.Preferences;

/**
 * Constants and helper methods used by other classes from this package.
 * 
 * @author Valdemar Svabensky <395868(at)mail(dot)muni(dot)cz>
 */
public final class Config {
    
    private Config() {
        throw new IllegalStateException(this.getClass().getName() + " class should not be instantiated.");
    }
    
    /**
     * Highest accepted number as a user input.
     */
    public static final int MAX_INT = 999999;
    
    /**
     * Lowest accepted number as a user input.
     */
    public static final int MIN_INT = -999999;
    
    /* Order of problems in combobox. */
    
    public static final int GCD = 0;
    public static final int BEZOUT = 1;
    public static final int INVERSE_MOD = 2;
    public static final int EULER_PHI = 3;
    public static final int LINEAR_CONG = 4;
    public static final int LINEAR_CONG_SYSTEM = 5;
    public static final int UNIT_GROUP_ELEMENT_ORDER = 6;
    public static final int MOD_POW = 7;
    public static final int LEGENDRE = 8;
    public static final int QUADRATIC_CONG_SIMPLE = 9;
    public static final int QUADRATIC_CONG_GENERAL = 10;
    public static final int BINOMIAL_CONG = 11;
    
    /**
     * Collection of all problem classes used to simplify instantiation of randomly generated problems.
     * See MainFrame.generateRandomButtonActionPerformed().
     */
    public static final ArrayList<Class<? extends MathProblem>> CLASSES = new ArrayList<>(Arrays.asList(
            GCDProblem.class,
            BezoutProblem.class,
            InverseModProblem.class,
            EulerPhiProblem.class,
            LinearCongruenceProblem.class,
            LinearCongruenceSystemProblem.class,
            UnitGroupElementOrderProblem.class,
            ModularPowerProblem.class,
            LegendreSymbolProblem.class,
            QuadraticCongruenceSimpleProblem.class,
            QuadraticCongruenceGeneralProblem.class,
            BinomialCongruenceProblem.class
    ));
    
    /**
     * Names of problems appearing in JComboBox Main/HelpFrame.problemTypeSelection.
     */
    public static final String[] PROBLEMS = new String[] {
        "Největší společný dělitel",
        "Bezoutova rovnost",
        "Inverze modulo n",
        "Eulerova funkce φ",
        "Lineární kongruence",
        "Soustava lineárních kongruencí",
        "Řád prvku grupy jednotek",
        "Modulární umocňování",
        "Legendreův symbol",
        "Kvadratická kongruence (jednoduchá)",
        "Kvadratická kongruence (obecná)",
        "Binomická kongruence"
    };
    
    private static final String PARAM_COUNT = "Počet parametrů: ";
    private static final String PARAM_COUNT1 = PARAM_COUNT + 1;
    private static final String PARAM_COUNT2 = PARAM_COUNT + 2;
    private static final String PARAM_COUNT3 = PARAM_COUNT + 3;
    private static final String PARAM_COUNT4 = PARAM_COUNT + 4;
    
    /**
     * Description of number of parameters for each problem.
     */
    public static final String[] PARAM_COUNTS = new String[] {
        PARAM_COUNT2,
        PARAM_COUNT2,
        PARAM_COUNT2,
        PARAM_COUNT1,
        PARAM_COUNT3,
        PARAM_COUNT4,
        PARAM_COUNT2,
        PARAM_COUNT3,
        PARAM_COUNT2,
        PARAM_COUNT2,
        PARAM_COUNT4,
        PARAM_COUNT3
    };
    
    /**
     * Description of required parameters for each problem.
     */
    public static final String[][] PARAMS = new String[][] {
        // GCD
        new String[] {"Celé číslo", "Celé číslo"},
        // BEZOUT
        new String[] {"Nezáporné celé číslo", "Nezáporné celé číslo"},
        // INVERSE_MOD
        new String[] {"Kladné celé číslo", "Kladné celé číslo, (a, b) = 1"},
        // EULER_PHI
        new String[] {"Kladné celé číslo"},
        // LINEAR_CONG
        new String[] {"Celé číslo (a)", "Celé číslo (b)", "Kladné celé číslo (n)"},
        // LINEAR_CONG_SYSTEM
        new String[] {"Počet rovnic (max. 4)", "Celá čísla (a_i)", "Celá čísla (b_i)", "Kladná celá čísla (n_i)"},
        // UNIT_GROUP_ELEMENT_ORDER
        new String[] {"Kladné celé číslo (prvek)", "Řád grupy (min. 2)"},
        // MOD_POW
        new String[] {"Celé číslo (b)", "Nezáporné celé číslo (e)", "Kladné celé číslo (n)"},
        // LEGENDRE
        new String[] {"Celé číslo (a)", "Liché prvočíslo (p)"},
        // QUADRATIC_CONG_SIMPLE
        new String[] {"Celé číslo (a)", "Kladné celé číslo (m)"},
        // QUADRATIC_CONG_GENERAL
        new String[] {"Nenulové celé číslo (a)", "Celé číslo (b)", "Celé číslo (c)", "Kladné celé číslo, (a, m) = 1"},
        // BINOMIAL_CONG
        new String[] {"Kladné celé číslo (n)", "Celé číslo (a)", "Kladné celé číslo (m)"}
    };
    
    private static final String RESULT_FORMAT = "Formát zadávání výsledku: " + Utils.NEWLINE;
    private static final String NUMBER = RESULT_FORMAT + "Číslo";
    private static final String NUMBER_PAIR = RESULT_FORMAT + "Dvojice čísel oddělených mezerou v pořadí: řešení, modulus";
    private static final String NUMBER_LIST = RESULT_FORMAT + "Seznam čísel oddělených mezerou v pořadí: " + Utils.NEWLINE;
    
    /**
     * Description of format of inputting result for each problem.
     */
    public static final String[] RESULT_FORMATS = new String[] {
        NUMBER,
        NUMBER_LIST + "d, x, y",
        NUMBER,
        NUMBER,
        NUMBER_PAIR,
        NUMBER_PAIR,
        NUMBER,
        NUMBER,
        NUMBER,
        NUMBER_LIST + "x1, x2, ..., xn, modulus",
        NUMBER_LIST + "x1, x2, ..., xn, modulus",
        NUMBER_LIST + "x1, x2, ..., xn, modulus"
    };
    
    /**
     * Name of easy difficulty bound.
     */
    public static final String EASY = "Lehká";
    
    /**
     * Name of medium difficulty bound.
     */
    public static final String MEDIUM = "Střední";
    
    /**
     * Name of hard difficulty bound.
     */
    public static final String HARD = "Těžká";
    
    /**
     * Alias for default pdfLaTeX executable file location.
     */
    public static final String DEFAULT = "Default";
    
    /**
     * Default value for pdfLaTeX executable file.
     * Null means automatic searching for default file location.
     */
    private static File pdfLaTeXFile = null;
    
    /**
     * Initializes application preferences when MainFrame window is created.
     * @param preferences Object with application preferences
     */
    public static void initPreferences(Preferences preferences) {
        if (pdfLaTeXFile == null)
            preferences.put("pathToPDFLaTeXFile", DEFAULT);
        else    
            preferences.put("pathToPDFLaTeXFile", pdfLaTeXFile.getAbsolutePath());
    }
    
    public static File getPDFLaTeXFile() {
        return pdfLaTeXFile;
    }

    public static void setPDFLaTeXFile(File pdfLaTeXFile) {
        Config.pdfLaTeXFile = pdfLaTeXFile;
    }
}
