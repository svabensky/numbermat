package Numbermat;

import java.util.Objects;

/**
 *
 * @author Valdemar Svabensky <395868@mail.muni.cz>
 */
public final class Pair<F extends Comparable<F>, S extends Comparable<S>> 
    implements Comparable<Pair<F,S>> {
    
    private F first;
    private S second;
    
    public Pair() {
    }
    
    public Pair(F first) {
        this.first = first;
    }

    public Pair(F first, S second) {
        this.first = first;
        this.second = second;
    }

    @Override
    public int hashCode() {
        final int hash1 = this.first.hashCode();
        final int hash2 = this.second.hashCode();
        return hash1 + hash2;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final Pair<?, ?> other = (Pair<?, ?>) (obj);
        if (!Objects.equals(this.first, other.first)) {
            return false;
        }
        if (!Objects.equals(this.second, other.second)) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return new StringBuilder().append("{").append(first).append(", ")
                .append(second).append("}").toString();
    }

    public F getFirst() {
        return first;
    }

    public S getSecond() {
        return second;
    }
    
    public void setFirst(F first) {
        this.first = first;
    }

    public void setSecond(S second) {
        this.second = second;
    }

    @Override
    public int compareTo(Pair<F, S> that) {
        int cmp = this.getFirst().compareTo(that.getFirst());
        if (cmp == 0)
            cmp = this.getSecond().compareTo(that.getSecond());
        return cmp;
    }
    
    public boolean isEmpty() {
        return this.equals(new Pair<F, S>());
    }
}
