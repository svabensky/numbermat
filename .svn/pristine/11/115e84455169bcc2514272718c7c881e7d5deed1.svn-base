package Numbermat.Problems;

import Numbermat.Utils;
import Numbermat.Algorithms;
import Numbermat.GUI.utils.Configuration;
import Numbermat.Pair;

/**
 *
 * @author Valdemar Svabensky <395868@mail.muni.cz>
 */
public final class GCDProblem extends MathProblem {

    private int a;
    private int b;
    
    public GCDProblem(String difficulty, boolean coprimeNumbers) {
        int lowerBound = Configuration.initLowerBound(difficulty);
        int upperBound = Configuration.initUpperBound(difficulty);
        
        int n1, n2;
        if (coprimeNumbers) {
            Pair<Integer, Integer> coprimes = Algorithms.randCoprime(lowerBound, upperBound);
            n1 = coprimes.getFirst();
            n2 = coprimes.getSecond();
        } else {
            n1 = Algorithms.randInt(lowerBound, upperBound);
            n2 = Algorithms.randInt(lowerBound, upperBound);
        }
        setVariables(n1, n2);
    }
    
    public GCDProblem(int n1, int n2) {
        setVariables(n1, n2);
    }
    
    private void setVariables(int n1, int n2) {
        if (n2 < n1) {
            a = n1;
            b = n2;
        }
        else {
            a = n2;
            b = n1;
        }
        result = new int[1];
        result[0] = (Algorithms.gcd(a, b));
        prepareAll();
    }
    
    @Override
    protected void prepareProblemPlaintext() {
        problemPlaintext = "NSD(" + a + ", " + b + ") = ?" + Utils.NEWLINE + Utils.NEWLINE;
    }
    
    @Override
    protected void prepareProblemLaTeX() {
        problemLaTeX = "$NSD(" + a + ", " + b + ") =$";
    }
    
    @Override
    protected void prepareSolutionPlaintext() {
        solutionPlaintext = Algorithms.gcdSteps(a, b) + Utils.NEWLINE;
    }

    @Override
    protected void prepareSolutionLaTeX() {
        String solutionCopy = solutionPlaintext.replaceAll("=", "&=");
        solutionCopy = Utils.replaceLast(solutionCopy, "&=", "=");
        solutionCopy = solutionCopy.replaceAll("\\*", "\\\\cdot");
        solutionCopy = solutionCopy.replace("NSD(", "NSD&(");
        
        StringBuilder sb = new StringBuilder();
        sb.append("\\begin{align}").append(Utils.NEWLINE);
        sb.append(solutionCopy);
        Utils.insertLaTeXNewlineSymbol(sb, sb.lastIndexOf("{align}") + 9, false);
        sb.append("\\end{align}");
        solutionLaTeX = sb.toString();
    }
    
    public int getA() {
        return a;
    }

    public int getB() {
        return b;
    }
}
