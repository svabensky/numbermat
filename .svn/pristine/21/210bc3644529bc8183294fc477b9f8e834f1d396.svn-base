package Numbermat.Problems;

import Numbermat.Algorithms;
import Numbermat.AlgorithmsSteps;
import Numbermat.Pair;
import Numbermat.Utils;
import java.util.ArrayList;
import java.util.List;

/**
 * Finding order of a permutation.
 * 
 * @author Valdemar Svabensky <395868(at)mail(dot)muni(dot)cz>
 */
public final class PermutationOrderProblem extends MathProblem {
    
    private List<Integer> permutation;
    
    /**
     * Instantiate with pseudo-randomly generated parameters.
     * @param difficulty One of Config.EASY, Config.MEDIUM, Config.HARD
     */
    public PermutationOrderProblem(final String difficulty) {
        easyBounds = new Pair(2, 5);
        mediumBounds = new Pair(6, 9);
        hardBounds = new Pair(8, 12);
        
        final Pair<Integer, Integer> bounds = initBounds(difficulty);
        final int lowerBound = bounds.getFirst();
        final int upperBound = bounds.getSecond();
        
        final int size = Algorithms.randInt(lowerBound, upperBound);
        List<Integer> perm = Algorithms.randPermutation(size);
        setVariables(perm);
    }
    
    /**
     * Instantiate with user provided parameters.
     * @param perm Permutation
     */
    public PermutationOrderProblem(final List<Integer> perm) {
        setVariables(perm);
    }
    
    private void setVariables(final List<Integer> perm) {
        permutation = new ArrayList<>(perm);
        result = new ArrayList<>(1);
        result.add(Algorithms.permutationOrder(Algorithms.permutationCycles(permutation)));
        prepareAll();
    }

    @Override
    protected void prepareProblemPlaintext() {
        final StringBuilder sb = new StringBuilder();
        sb.append("Určete řád permutace ").append(AlgorithmsSteps.SIGMA).append(" = ");
        sb.append(Utils.NEWLINE).append(AlgorithmsSteps.permutationToString(permutation));
        problemPlaintext = sb.toString();
    }

    @Override
    protected void prepareProblemLaTeX() {
        final String matrix = Utils.prepareMatrix(AlgorithmsSteps.permutationToString(permutation));
        final StringBuilder sb = new StringBuilder();
        sb.append("\\text{Ur\\v{c}ete \\v{r}\\'ad permutace }").append("\\\\");
        sb.append(Utils.prepareDisplayMath("\\sigma = " + matrix));
        problemLaTeX = sb.toString();
    }

    @Override
    protected void prepareSolutionPlaintext() {
        solutionPlaintext = AlgorithmsSteps.permutationOrderSteps(permutation);
    }

    @Override
    protected void prepareSolutionLaTeX() {
        solutionLaTeX = solutionPlaintext;
    }
}
