package Numbermat.Problems;

import Numbermat.Utils;
import Numbermat.AlgorithmsSteps;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.List;
import java.util.ArrayList;

/**
 *
 * @author Valdemar Svabensky <395868@mail.muni.cz>
 */
public final class InverseModProblem extends MathProblem {
    
    private BezoutProblem bezoutProblem;
    private int a;
    private int b;
    
    public InverseModProblem(String difficulty) {
        bezoutProblem = new BezoutProblem(difficulty, true);
        setVariables();
    }
    
    public InverseModProblem(int n1, int n2) {
        bezoutProblem = new BezoutProblem(n1, n2);
        setVariables();
    }
    
    private void setVariables() {
        a = bezoutProblem.getGcdProblem().getA();
        b = bezoutProblem.getGcdProblem().getB();
        
        final List<Integer> bezout = bezoutProblem.getResult();
        result = new ArrayList(1);
        result.add(bezout.get(2));
        if (bezout.get(2) < 0)
            result.set(0, result.get(0) + a);
        prepareAll();
    }

    @Override
    protected void prepareProblemPlaintext() {
        final StringBuilder lineEnd = AlgorithmsSteps.buildModLineEnd(a);
        StringBuilder sb = new StringBuilder("[").append(b).append("]^(-1)");
        sb.append(lineEnd).append(" = ");
        problemPlaintext = sb.toString();
    }

    @Override
    protected void prepareProblemLaTeX() {
        StringBuilder sb = new StringBuilder("$[").append(b).append("]^{-1}_{");
        sb.append(a).append("} = $\\\\");
        problemLaTeX = sb.toString();
    }

    @Override
    protected void prepareSolutionPlaintext() {
        final String solutionBezout = bezoutProblem.getSolutionPlaintext();
        final Pattern pattern = Pattern.compile("x = .*", Pattern.DOTALL);
        final String replacement = prepareSolutionMatcher(solutionBezout, pattern);
        
        StringBuilder sb = new StringBuilder(Utils.replaceLast(problemPlaintext, Utils.NEWLINE, ""));
        sb.append(result.get(0)).append(Utils.NEWLINE);
        solutionPlaintext = Utils.replaceLast(solutionBezout, replacement, sb.toString());
    }

    @Override
    protected void prepareSolutionLaTeX() {
        final String solutionBezout = bezoutProblem.getSolutionLaTeX();
        final Pattern pattern = Pattern.compile("x &= .*");
        final String replacement = prepareSolutionMatcher(solutionBezout, pattern);
        
        StringBuilder sb = new StringBuilder("[").append(b).append("]^{-1}_{");
        sb.append(a).append("} &= ").append(result.get(0));
        solutionLaTeX = Utils.replaceLast(solutionBezout, replacement, sb.toString());
    }
    
    private static String prepareSolutionMatcher(String solutionBezout, Pattern pattern) {
        final Matcher matcher = pattern.matcher(solutionBezout);
        matcher.find();
        return matcher.group(0);
    }
}
