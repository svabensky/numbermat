package Numbermat.Problems;

import java.util.regex.Matcher;
import java.util.regex.Pattern;
import Numbermat.Utils;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Valdemar Svabensky <395868@mail.muni.cz>
 */
public final class InverseModProblem extends MathProblem {
    
    private BezoutProblem bezoutProblem;
    
    public InverseModProblem(String difficulty) {
        bezoutProblem = new BezoutProblem(difficulty, true);
        setVariables();
    }
    
    public InverseModProblem(int n1, int n2) {
        bezoutProblem = new BezoutProblem(n1, n2);
        setVariables();
    }
    
    private void setVariables() {
        final List<Integer> bezout = bezoutProblem.getResult();
        result = new ArrayList(1);
        result.add(bezout.get(2));
        if (bezout.get(2) < 0)
            result.set(0, result.get(0) + bezoutProblem.getGcdProblem().getA());
        prepareAll();
    }

    @Override
    protected void prepareProblemPlaintext() {
        StringBuilder sb = new StringBuilder();
        sb.append("[").append(bezoutProblem.getGcdProblem().getB());
        sb.append("]^(-1) (mod ").append(bezoutProblem.getGcdProblem().getA());
        sb.append(") = ").append(Utils.NEWLINE);
        problemPlaintext = sb.toString();
    }

    @Override
    protected void prepareProblemLaTeX() {
        StringBuilder sb = new StringBuilder();
        sb.append("$[").append(bezoutProblem.getGcdProblem().getB());
        sb.append("]^{-1}_{").append(bezoutProblem.getGcdProblem().getA());
        sb.append("} = $\\\\");
        problemLaTeX = sb.toString();
    }

    @Override
    protected void prepareSolutionPlaintext() {
        final String problemPlaintextCopy = Utils.replaceLast(problemPlaintext, Utils.NEWLINE, "");
        final String solutionBezout = bezoutProblem.getSolutionPlaintext();
        Pattern pattern = Pattern.compile("x = .*", Pattern.DOTALL);
        Matcher matcher = pattern.matcher(solutionBezout);
        matcher.find();
        
        final String substring = matcher.group(0);
        final String replacement = problemPlaintextCopy + result.get(0) + Utils.NEWLINE;
        solutionPlaintext = Utils.replaceLast(solutionBezout, substring, replacement);
    }

    @Override
    protected void prepareSolutionLaTeX() {
        final String solutionBezout = bezoutProblem.getSolutionLaTeX();
        Pattern pattern = Pattern.compile("x &= .*");
        Matcher matcher = pattern.matcher(solutionBezout);
        matcher.find();
        
        StringBuilder sb = new StringBuilder();
        sb.append("[").append(bezoutProblem.getGcdProblem().getB());
        sb.append("]^{-1}_{").append(bezoutProblem.getGcdProblem().getA());
        sb.append("} &= ").append(result.get(0));
        final String substring = matcher.group(0);
        solutionLaTeX = Utils.replaceLast(solutionBezout, substring, sb.toString());
    }
}
