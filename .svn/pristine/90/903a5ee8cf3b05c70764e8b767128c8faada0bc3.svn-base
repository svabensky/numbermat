package Numbermat.GUI.utils;

import java.awt.Color;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import Numbermat.GUI.MainFrame;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Valdemar Svabensky <395868@mail.muni.cz>
 */
public final class UserInputChecker {

    private UserInputChecker() {
        throw new IllegalStateException("UserInputChecker class should not be instantiated.");
    }
    
    /*** PARAMETER CHECKING ***/
    
    /**
     * Checks a single number that the user inputs from GUI.
     * 
     * @param inputField Component where the user inputs text
     * @param mainFrame Frame where error message might be shown
     * @param lowerBound How small a number can get
     * @param upperBound How big a number can get
     * @param zero Is zero allowed?
     * @return Parsed number, or null in case of error
     */
    public static Integer numberInput(JTextField inputField, MainFrame mainFrame, int lowerBound, int upperBound, boolean zero) {
        Integer result = null;
        try {
            result = Integer.parseInt(inputField.getText());
            if ((result == 0) && !zero) {
                result = null;
                throw new NumberFormatException("Zero is not allowed.");
            }
            if ((result < lowerBound) || (result > upperBound)) {
                result = null;
                throw new NumberFormatException("Invalid range.");
            }
            inputField.setBackground(Color.white);
        } catch (NumberFormatException ex) {
            String zeroAllowed = "";
            if ((lowerBound < 1) && (!zero))
                zeroAllowed = " Nula není povolena.";
            error(inputField, mainFrame,
                    "Prosím zadejte číslo v intervalu [" + lowerBound + ", "
                    + upperBound + ")." + zeroAllowed);
        }
        return result;
    }
    
    public static Integer positiveNumberInput(JTextField inputField, MainFrame mainFrame) {
        return numberInput(inputField, mainFrame, 1, Configuration.MAX_INT, false);
    }
    
    public static Integer nonNegativeNumberInput(JTextField inputField, MainFrame mainFrame) {
        return numberInput(inputField, mainFrame, 0, Configuration.MAX_INT, true);
    }
    
    public static Integer nonZeroNumberInput(JTextField inputField, MainFrame mainFrame) {
        return numberInput(inputField, mainFrame, Configuration.MIN_INT, Configuration.MAX_INT, false);
    }
    
    public static Integer integerNumberInput(JTextField inputField, MainFrame mainFrame) {
        return numberInput(inputField, mainFrame, Configuration.MIN_INT, Configuration.MAX_INT, true);
    }
    
    /**
     * User inputs several numbers separated by space in one field.
     * The function checks if the list contains only required numbers.
     * 
     * @param count Expected number of parameters given
     * @param inputField Component where the user inputs text
     * @param mainFrame Frame where error message might be shown
     * @param lowerBound How small a number can get
     * @param zero Is zero allowed?
     * @param errorMsg Error message text
     * @return Parsed numbers in ArrayList or empty ArrayList
     */
    public static List<Integer> numberListInput(int count, JTextField inputField, MainFrame mainFrame, int lowerBound, boolean zero, String errorMsg) {
        List<Integer> result = UserInputChecker.parse(count, inputField, mainFrame);
        if (!result.isEmpty()) {
            for (int i = 0; i < count; ++i) {
                if ((result.get(i) < lowerBound) || ((result.get(i).equals(0)) && ! zero)){
                    error(inputField, mainFrame, errorMsg);
                    result = new ArrayList<>();
                    break;
                }
            }
        }
        return result;
    }
    
    /**
     * Shortcut for the most basic type of parameter checking.
     * Every parameter is a single integer.
     * 
     * @param count Number of parameters given
     * @param inputFields Components where the user inputs text
     * @param mainFrame Frame where error message might be shown
     * @return Checked numbers in ArrayList or empty ArrayList
     */
    public static List<Integer> checkIntegerParameters(int count, JTextField[] inputFields, MainFrame mainFrame) {
        List<Integer> result = new ArrayList<>(count);
        for (int i = 0; i < count; ++i) {
            Integer n = UserInputChecker.integerNumberInput(inputFields[i], mainFrame);
            if (n != null)
                result.add(n);
            else
                return new ArrayList<>();
        }
        return result;
    }

    /**
     * Shortcut for parameter checking.
     * Every parameter is a single non-negative number.
     * 
     * @param count Number of parameters given
     * @param inputFields Components where the user inputs text
     * @param mainFrame Frame where error message might be shown
     * @return Checked numbers in ArrayList or empty ArrayList
     */
    public static List<Integer> checkNonNegativeParameters(int count, JTextField[] inputFields, MainFrame mainFrame) {
        List<Integer> result = new ArrayList<>(count);
        for (int i = 0; i < count; ++i) {
            Integer n = UserInputChecker.nonNegativeNumberInput(inputFields[i], mainFrame);
            if (n != null)
                result.add(n);
            else
                return new ArrayList<>();
        }
        return result;
    }
    
    /**
     * Single linear congruence parameter checking.
     * 
     * @param inputFields Components where the user inputs text
     * @param mainFrame Frame where error message might be shown
     * @return Checked numbers in ArrayList or empty ArrayList
     */
    public static List<Integer> linearCongruenceNumberInput(JTextField[] inputFields, MainFrame mainFrame) {
        List<Integer> result = new ArrayList<>(3);
        Integer a = UserInputChecker.integerNumberInput(inputFields[0], mainFrame);
        Integer b = UserInputChecker.integerNumberInput(inputFields[1], mainFrame);
        Integer n = UserInputChecker.positiveNumberInput(inputFields[2], mainFrame);
        if ((a != null) && (b != null) && (n != null)) {
            /*if (a % n == 0) {
                error(inputFields[0], mainFrame, a + " ≡ 0 (mod " + n + ")");
            } else {*/
                result.add(a);
                result.add(b);
                result.add(n);
            //}
        }
        return result;
    }
        
    /*** USER ANSWERS CHECKING ***/
    
    /**
     * Checking user answers from userAnswerField.
     * Any positive number is allowed.
     * 
     * @param inputField Component where the user inputs text
     * @param mainFrame Frame where error message might be shown
     * @return Positive number result or empty ArrayList in case of error
     */
    public static List<Integer> positiveNumberResult(JTextField inputField, MainFrame mainFrame) {
        List<Integer> actualResult = new ArrayList<>();
        Integer userAnswer = positiveNumberInput(inputField, mainFrame);
        if (userAnswer != null)
            actualResult.add(userAnswer);
        return actualResult;
    }

    /**
     * Checking user answers from userAnswerField.
     * Any 'count' integers are allowed.
     * 
     * @param count Number of integers in list, e.g. 2 for pair or 3 for Bezout equality
     * @param inputField Component where the user inputs text
     * @param mainFrame Frame where error message might be shown
     * @return Parsed bezout coefficients or empty ArrayList in case of error
     */
    public static List<Integer> listResult(int count, JTextField inputField, MainFrame mainFrame) {
        return parse(count, inputField, mainFrame);
    }
    
    /*** ADDITIONAL METHODS ***/
    
    /**
     * User inputs several numbers separated by space in one field.
     * The function parses the input.
     * 
     * @param count Number of tokens
     * @param inputField Component where the user inputs text
     * @param mainFrame Frame where error message might be shown
     * @return Parsed input or empty ArrayList
     */
    public static List<Integer> parse(int count, JTextField inputField, MainFrame mainFrame) {
        List<Integer> result = new ArrayList<>();
        try {
            String[] tokens = inputField.getText().split("\\s+");
            if (tokens.length != count)
                throw new IllegalArgumentException("Invalid number of arguments.");
            
            for (int i = 0; i < count; ++i) {
                int coefficient = Integer.parseInt(tokens[i]);
                result.add(coefficient);
                if ((coefficient < Configuration.MIN_INT) ||
                    (coefficient > Configuration.MAX_INT)) {
                    result = new ArrayList<>();
                    throw new NumberFormatException("Invalid range.");
                }
            }
            inputField.setBackground(Color.white);
        } catch (IllegalArgumentException ex) {
            error(inputField, mainFrame,
                    "Prosím zadejte " + count + " celočíselné koeficienty oddělené mezerou.");
        }
        return result;
    }
    
    public static void error(JTextField inputField, MainFrame mainFrame, String msg) {
        final String header = "Chybný vstup";
        inputField.setBackground(Color.red);
        JOptionPane.showMessageDialog(mainFrame, msg, header, JOptionPane.INFORMATION_MESSAGE);
    }
    
    public static void error(MainFrame mainFrame, String msg, String header) {
        JOptionPane.showMessageDialog(mainFrame, msg, header, JOptionPane.INFORMATION_MESSAGE);
    }
}
