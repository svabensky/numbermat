package cz.muni.fi.Numbermat.GUI;

import cz.muni.fi.Numbermat.Problems.BinomialCongruenceProblem;
import cz.muni.fi.Numbermat.Problems.MathProblem;
import cz.muni.fi.Numbermat.Problems.BezoutProblem;
import cz.muni.fi.Numbermat.Problems.LegendreSymbolProblem;
import cz.muni.fi.Numbermat.Problems.QuadraticCongruenceGeneralProblem;
import cz.muni.fi.Numbermat.Problems.PermutationOrderProblem;
import cz.muni.fi.Numbermat.Problems.InverseModProblem;
import cz.muni.fi.Numbermat.Problems.LinearCongruenceSystemProblem;
import cz.muni.fi.Numbermat.Problems.ModularPowerProblem;
import cz.muni.fi.Numbermat.Problems.LinearCongruenceProblem;
import cz.muni.fi.Numbermat.Problems.QuadraticCongruenceSimpleProblem;
import cz.muni.fi.Numbermat.Problems.UnitGroupElementOrderProblem;
import cz.muni.fi.Numbermat.Problems.GCDProblem;
import cz.muni.fi.Numbermat.Problems.EulerPhiProblem;
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.Arrays;
import java.util.Enumeration;
import javax.swing.AbstractButton;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import cz.muni.fi.Numbermat.Utils;
import java.awt.Dimension;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.List;
import java.util.prefs.Preferences;
import javax.swing.JTextField;

/**
 * Application's main GUI window.
 * 
 * @author Valdemar Svabensky <395868(at)mail(dot)muni(dot)cz>
 */
public class MainFrame extends javax.swing.JFrame {
    
    public static final int DEFAULT_COMPONENT_HEIGHT = 30;
    public static final int PARAMETER_FIELD_WIDTH = 165;
    public static final int SOLUTION_FIELD_WIDTH = 135;
    public static final int SOLUTION_BUTTON_WIDTH = 220;
    public static final int BOTTOM_RIGHT_BUTTONS_WIDTH = 147;

    private MathProblem mathProblem = null;
    
    private static Preferences preferences;
    
    /**
     * Creates new form MainFrame.
     */
    public MainFrame() {
        initComponents();
        preferences = Preferences.userRoot().node(this.getClass().getName());
        /* Check if the program runs on the machine for the first time */
        final String pathToPDFLaTeXFile = preferences.get("pathToPDFLaTeXFile", null);
        if (pathToPDFLaTeXFile == null)
            Config.initPreferences(preferences);
        else if (!pathToPDFLaTeXFile.equals(Config.DEFAULT))
                Config.setPDFLaTeXFile(new File(pathToPDFLaTeXFile));
        
        /* Group some components for easier handling */
        
        parameterLabelArray = new javax.swing.JLabel[] {
            parameter1Label, parameter2Label, parameter3Label, parameter4Label
        };
    
        parameterArray = new javax.swing.JTextField[] {
            parameter1, parameter2, parameter3, parameter4
        };
    
        problemPartComponentsArray = new JComponent[] {
            userAnswerField, checkButton,
            showSolutionLaTeXButton, showSolutionPlaintextButton,
            copyToClipboardButton, exportToPDFButton, resetButton
        };
    }
    
    public static Preferences getPreferences() {
        return preferences;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        difficultyButtonGroup = new javax.swing.ButtonGroup();
        logoField = new javax.swing.JLabel();
        difficultyLabel = new javax.swing.JLabel();
        difficultySeparator1 = new javax.swing.JSeparator();
        difficultySeparator2 = new javax.swing.JSeparator();
        easyButton = new javax.swing.JRadioButton();
        mediumButton = new javax.swing.JRadioButton();
        hardButton = new javax.swing.JRadioButton();
        problemTypeLabel = new javax.swing.JLabel();
        problemTypeLabelSeparator1 = new javax.swing.JSeparator();
        problemTypeLabelSeparator2 = new javax.swing.JSeparator();
        problemTypeSelection = new javax.swing.JComboBox();
        generateRandomButton = new javax.swing.JButton();
        setParametersButton = new javax.swing.JButton();
        parameter1Label = new javax.swing.JLabel();
        parameter1 = new javax.swing.JTextField();
        parameter2Label = new javax.swing.JLabel();
        parameter2 = new javax.swing.JTextField();
        parameter3Label = new javax.swing.JLabel();
        parameter3 = new javax.swing.JTextField();
        parameter4Label = new javax.swing.JLabel();
        parameter4 = new javax.swing.JTextField();
        smallHorizontalSeparator = new javax.swing.JSeparator();
        settingsButton = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();
        generateWithParametersButton = new javax.swing.JButton();
        verticalSeparator = new javax.swing.JSeparator();
        problemArea = new javax.swing.JLabel();
        userAnswerField = new javax.swing.JTextField();
        checkButton = new javax.swing.JButton();
        checkIcon = new javax.swing.JLabel();
        horizontalSeparator = new javax.swing.JSeparator();
        showSolutionLaTeXButton = new javax.swing.JButton();
        showSolutionPlaintextButton = new javax.swing.JButton();
        solutionScrollPane = new javax.swing.JScrollPane();
        solutionArea = new javax.swing.JTextPane();
        copyToClipboardButton = new javax.swing.JButton();
        exportToPDFButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        difficultyButtonGroup.add(hardButton);
        difficultyButtonGroup.add(easyButton);
        difficultyButtonGroup.add(mediumButton);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Numbermat: Generátor příkladů");
        setMinimumSize(new java.awt.Dimension(800, 600));
        setName("MainFrame"); // NOI18N
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        logoField.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Numbermat/GUI/Images/logo-numbermat.png"))); // NOI18N
        getContentPane().add(logoField, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 25, -1, -1));

        difficultyLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        difficultyLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        difficultyLabel.setText("OBTÍŽNOST");
        getContentPane().add(difficultyLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 100, 275, -1));

        difficultySeparator1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        difficultySeparator1.setPreferredSize(new java.awt.Dimension(90, 2));
        getContentPane().add(difficultySeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 105, -1, -1));

        difficultySeparator2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        difficultySeparator2.setPreferredSize(new java.awt.Dimension(90, 2));
        getContentPane().add(difficultySeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 105, -1, -1));

        easyButton.setMnemonic('l');
        easyButton.setText(Config.EASY);
        easyButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        easyButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        getContentPane().add(easyButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(44, 128, -1, -1));

        mediumButton.setMnemonic('s');
        mediumButton.setSelected(true);
        mediumButton.setText(Config.MEDIUM);
        mediumButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        mediumButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        getContentPane().add(mediumButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(134, 128, -1, -1));

        hardButton.setMnemonic('t');
        hardButton.setText(Config.HARD);
        hardButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        hardButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        getContentPane().add(hardButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(228, 128, -1, -1));

        problemTypeLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        problemTypeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        problemTypeLabel.setText("TYP PŘÍKLADU");
        problemTypeLabel.setPreferredSize(new java.awt.Dimension(275, 14));
        getContentPane().add(problemTypeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 195, -1, -1));

        problemTypeLabelSeparator1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        problemTypeLabelSeparator1.setPreferredSize(new java.awt.Dimension(80, 2));
        getContentPane().add(problemTypeLabelSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 200, -1, -1));

        problemTypeLabelSeparator2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        problemTypeLabelSeparator2.setPreferredSize(new java.awt.Dimension(80, 2));
        getContentPane().add(problemTypeLabelSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 200, -1, -1));

        problemTypeSelection.setMaximumRowCount(15);
        problemTypeSelection.setModel(new javax.swing.DefaultComboBoxModel<>(cz.muni.fi.Numbermat.GUI.Config.PROBLEMS));
        problemTypeSelection.setPreferredSize(new java.awt.Dimension(275, 30));
        problemTypeSelection.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                problemTypeSelectionItemStateChanged(evt);
            }
        });
        getContentPane().add(problemTypeSelection, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 225, -1, -1));

        generateRandomButton.setBackground(new java.awt.Color(0, 102, 0));
        generateRandomButton.setForeground(new java.awt.Color(255, 255, 255));
        generateRandomButton.setMnemonic('g');
        generateRandomButton.setText("<html><p align=\"center\"><u>G</u>enerovat<br/>náhodně</p></html>");
        generateRandomButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        generateRandomButton.setMinimumSize(new Dimension(PARAMETER_FIELD_WIDTH / 2, 2 * DEFAULT_COMPONENT_HEIGHT));
        generateRandomButton.setPreferredSize(new java.awt.Dimension(100, 60));
        generateRandomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateRandomButtonActionPerformed(evt);
            }
        });
        getContentPane().add(generateRandomButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 275, -1, -1));

        setParametersButton.setMnemonic('n');
        setParametersButton.setText("<html><p align=\"center\"><u>N</u>astavit<br/>parametry</p></html>");
        setParametersButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        setParametersButton.setPreferredSize(new Dimension(PARAMETER_FIELD_WIDTH, 2 * DEFAULT_COMPONENT_HEIGHT));
        setParametersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setParametersButtonActionPerformed(evt);
            }
        });
        getContentPane().add(setParametersButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(127, 275, -1, -1));

        parameter1Label.setText("Parametr #1");
        parameter1Label.setEnabled(false);
        parameter1Label.setPreferredSize(new java.awt.Dimension(100, 25));
        getContentPane().add(parameter1Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 350, -1, -1));

        parameter1.setEnabled(false);
        parameter1.setPreferredSize(new Dimension(PARAMETER_FIELD_WIDTH, DEFAULT_COMPONENT_HEIGHT));
        parameter1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                parameter1FocusGained(evt);
            }
        });
        getContentPane().add(parameter1, new org.netbeans.lib.awtextra.AbsoluteConstraints(127, 348, -1, -1));

        parameter2Label.setText("Parametr #2");
        parameter2Label.setEnabled(false);
        parameter2Label.setPreferredSize(new java.awt.Dimension(100, 25));
        getContentPane().add(parameter2Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 385, -1, -1));

        parameter2.setEnabled(false);
        parameter2.setPreferredSize(new Dimension(PARAMETER_FIELD_WIDTH, DEFAULT_COMPONENT_HEIGHT));
        parameter2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                parameter2FocusGained(evt);
            }
        });
        getContentPane().add(parameter2, new org.netbeans.lib.awtextra.AbsoluteConstraints(127, 383, -1, -1));

        parameter3Label.setText("Parametr #3");
        parameter3Label.setEnabled(false);
        parameter3Label.setPreferredSize(new java.awt.Dimension(100, 25));
        getContentPane().add(parameter3Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 420, -1, -1));

        parameter3.setEnabled(false);
        parameter3.setPreferredSize(new Dimension(PARAMETER_FIELD_WIDTH, DEFAULT_COMPONENT_HEIGHT));
        parameter3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                parameter3FocusGained(evt);
            }
        });
        getContentPane().add(parameter3, new org.netbeans.lib.awtextra.AbsoluteConstraints(127, 418, -1, -1));

        parameter4Label.setText("Parametr #4");
        parameter4Label.setEnabled(false);
        parameter4Label.setPreferredSize(new java.awt.Dimension(100, 25));
        getContentPane().add(parameter4Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 455, -1, -1));

        parameter4.setEnabled(false);
        parameter4.setPreferredSize(new Dimension(PARAMETER_FIELD_WIDTH, DEFAULT_COMPONENT_HEIGHT));
        parameter4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                parameter4FocusGained(evt);
            }
        });
        getContentPane().add(parameter4, new org.netbeans.lib.awtextra.AbsoluteConstraints(127, 453, -1, -1));

        smallHorizontalSeparator.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        smallHorizontalSeparator.setPreferredSize(new java.awt.Dimension(92, 2));
        getContentPane().add(smallHorizontalSeparator, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 502, -1, -1));

        settingsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Numbermat/GUI/Images/settings-icon.png"))); // NOI18N
        settingsButton.setPreferredSize(new java.awt.Dimension(40, 30));
        settingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsButtonActionPerformed(evt);
            }
        });
        getContentPane().add(settingsButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 515, -1, -1));

        helpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Numbermat/GUI/Images/help-icon.png"))); // NOI18N
        helpButton.setPreferredSize(new java.awt.Dimension(40, 30));
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });
        getContentPane().add(helpButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(68, 515, -1, -1));

        generateWithParametersButton.setBackground(new java.awt.Color(0, 102, 0));
        generateWithParametersButton.setForeground(new java.awt.Color(255, 255, 255));
        generateWithParametersButton.setMnemonic('v');
        generateWithParametersButton.setText("Generovat");
        generateWithParametersButton.setEnabled(false);
        generateWithParametersButton.setPreferredSize(new Dimension(PARAMETER_FIELD_WIDTH, DEFAULT_COMPONENT_HEIGHT * 3 / 2));
        generateWithParametersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateWithParametersButtonActionPerformed(evt);
            }
        });
        getContentPane().add(generateWithParametersButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(127, 500, -1, -1));

        verticalSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);
        verticalSeparator.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        verticalSeparator.setPreferredSize(new java.awt.Dimension(2, 545));
        getContentPane().add(verticalSeparator, new org.netbeans.lib.awtextra.AbsoluteConstraints(305, 10, -1, -1));

        problemArea.setBackground(new java.awt.Color(255, 255, 255));
        problemArea.setOpaque(true);
        problemArea.setPreferredSize(new java.awt.Dimension(290, 120));
        getContentPane().add(problemArea, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 25, -1, -1));

        userAnswerField.setText("Pole pro výsledek");
        userAnswerField.setEnabled(false);
        userAnswerField.setPreferredSize(new Dimension(SOLUTION_FIELD_WIDTH, DEFAULT_COMPONENT_HEIGHT * 5/3));
        userAnswerField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                userAnswerFieldFocusGained(evt);
            }
        });
        userAnswerField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                userAnswerFieldKeyPressed(evt);
            }
        });
        getContentPane().add(userAnswerField, new org.netbeans.lib.awtextra.AbsoluteConstraints(615, 25, -1, -1));

        checkButton.setText("Zkontrolovat");
        checkButton.setEnabled(false);
        checkButton.setPreferredSize(new Dimension(SOLUTION_FIELD_WIDTH, DEFAULT_COMPONENT_HEIGHT));
        checkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkButtonActionPerformed(evt);
            }
        });
        getContentPane().add(checkButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(615, 85, -1, -1));

        checkIcon.setPreferredSize(new Dimension(DEFAULT_COMPONENT_HEIGHT, DEFAULT_COMPONENT_HEIGHT));
        getContentPane().add(checkIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(755, 35, -1, -1));

        horizontalSeparator.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        horizontalSeparator.setPreferredSize(new java.awt.Dimension(450, 2));
        getContentPane().add(horizontalSeparator, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 165, -1, -1));

        showSolutionLaTeXButton.setMnemonic('x');
        showSolutionLaTeXButton.setText("Zobrazit řešení (LaTeX)");
        showSolutionLaTeXButton.setToolTipText("");
        showSolutionLaTeXButton.setEnabled(false);
        showSolutionLaTeXButton.setPreferredSize(new Dimension(SOLUTION_BUTTON_WIDTH, DEFAULT_COMPONENT_HEIGHT));
        showSolutionLaTeXButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showSolutionLaTeXButtonActionPerformed(evt);
            }
        });
        getContentPane().add(showSolutionLaTeXButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 185, -1, -1));

        showSolutionPlaintextButton.setMnemonic('b');
        showSolutionPlaintextButton.setText("Zobrazit řešení (text)");
        showSolutionPlaintextButton.setEnabled(false);
        showSolutionPlaintextButton.setPreferredSize(new Dimension(SOLUTION_BUTTON_WIDTH, DEFAULT_COMPONENT_HEIGHT));
        showSolutionPlaintextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showSolutionPlaintextButtonActionPerformed(evt);
            }
        });
        getContentPane().add(showSolutionPlaintextButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 185, -1, -1));

        solutionScrollPane.setPreferredSize(new java.awt.Dimension(450, 280));

        solutionArea.setEditable(false);
        solutionScrollPane.setViewportView(solutionArea);

        getContentPane().add(solutionScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 225, -1, -1));

        copyToClipboardButton.setMnemonic('k');
        copyToClipboardButton.setText("Kopírovat řešení");
        copyToClipboardButton.setEnabled(false);
        copyToClipboardButton.setPreferredSize(new Dimension(BOTTOM_RIGHT_BUTTONS_WIDTH, DEFAULT_COMPONENT_HEIGHT));
        copyToClipboardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyToClipboardButtonActionPerformed(evt);
            }
        });
        getContentPane().add(copyToClipboardButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 515, -1, -1));

        exportToPDFButton.setMnemonic('e');
        exportToPDFButton.setText("Export do PDF");
        exportToPDFButton.setEnabled(false);
        exportToPDFButton.setPreferredSize(new Dimension(BOTTOM_RIGHT_BUTTONS_WIDTH, DEFAULT_COMPONENT_HEIGHT));
        exportToPDFButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportToPDFButtonActionPerformed(evt);
            }
        });
        getContentPane().add(exportToPDFButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(472, 515, -1, -1));

        resetButton.setMnemonic('r');
        resetButton.setText("Restart");
        resetButton.setEnabled(false);
        resetButton.setPreferredSize(new Dimension(BOTTOM_RIGHT_BUTTONS_WIDTH, DEFAULT_COMPONENT_HEIGHT));
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });
        getContentPane().add(resetButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(624, 515, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        resetProblemPart();
        resetSetParametersPart();
    }//GEN-LAST:event_resetButtonActionPerformed

    private void userAnswerFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_userAnswerFieldFocusGained
        if (evt.getOppositeComponent() != null)
            userAnswerField.selectAll();
    }//GEN-LAST:event_userAnswerFieldFocusGained

    private void checkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkButtonActionPerformed
        final List<Integer> expectedResult = mathProblem.getResult();
        List<Integer> actualResult = new ArrayList();
        
        switch (getSelectedProblemIndex()) {
            case Config.GCD:
            case Config.INVERSE_MOD:
            case Config.EULER_PHI:
            case Config.UNIT_GROUP_ELEMENT_ORDER:
            case Config.MOD_POW:
            case Config.PERM_ORDER:
                actualResult = UserInputChecker.positiveNumberResult(userAnswerField, this);
                break;
                
            case Config.BEZOUT:
            case Config.LINEAR_CONG:
            case Config.LINEAR_CONG_SYSTEM:
            case Config.QUADRATIC_CONG_SIMPLE:
            case Config.QUADRATIC_CONG_GENERAL:
            case Config.BINOMIAL_CONG:
                actualResult = UserInputChecker.listResult(userAnswerField, this, expectedResult.size());
                break;
                
            case Config.LEGENDRE:
                actualResult = UserInputChecker.numberResult(userAnswerField, this, -1, 1);
                break;
        }
        if (!actualResult.isEmpty()) {
            if (actualResult.equals(expectedResult))
                checkIcon.setIcon(new ImageIcon(getClass().getResource(
                        "/Numbermat/GUI/Images/correct.png")));
            else
                checkIcon.setIcon(new ImageIcon(getClass().getResource(
                        "/Numbermat/GUI/Images/wrong.png")));
        }
    }//GEN-LAST:event_checkButtonActionPerformed

    private void showSolutionLaTeXButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showSolutionLaTeXButtonActionPerformed
        solutionArea.setText("");
        final String solutionLaTeX = mathProblem.getSolutionLaTeX();
        final BufferedImage solutionImg = Utils.createLaTeXImage(solutionLaTeX);
        solutionArea.insertIcon(new ImageIcon(solutionImg));
    }//GEN-LAST:event_showSolutionLaTeXButtonActionPerformed

    private void showSolutionPlaintextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showSolutionPlaintextButtonActionPerformed
        solutionArea.removeAll();
        solutionArea.setText(mathProblem.getSolutionPlaintext());
    }//GEN-LAST:event_showSolutionPlaintextButtonActionPerformed

    private void copyToClipboardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyToClipboardButtonActionPerformed
        final String solutionPlaintext = mathProblem.getSolutionPlaintext();
        final StringSelection selection = new StringSelection(solutionPlaintext);
        final Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(selection, null);
    }//GEN-LAST:event_copyToClipboardButtonActionPerformed

    private void exportToPDFButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportToPDFButtonActionPerformed
        final JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setDialogTitle("Zvolte výstupnou složku");
        
        if (evt.getSource() == exportToPDFButton) {
            final int returnVal = fc.showOpenDialog(MainFrame.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                final File pdfLaTeXFile = Config.getPDFLaTeXFile();
                final File workingDir = fc.getSelectedFile();
                Utils.exportPDF(pdfLaTeXFile, workingDir,
                        mathProblem.getProblemLaTeX(), mathProblem.getSolutionLaTeX(), this);
            }
        }
    }//GEN-LAST:event_exportToPDFButtonActionPerformed
  
    private void generateRandomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateRandomButtonActionPerformed
        resetSetParametersPart();
        resetProblemPart();
        final String difficulty = getSelectedButtonText(difficultyButtonGroup);
        final int problemIndex = getSelectedProblemIndex();
        final Class<? extends MathProblem> selectedProblemClass = Config.CLASSES.get(problemIndex);
        
        try {
            switch (problemIndex) {
                case Config.GCD:
                case Config.BEZOUT:
                    mathProblem = selectedProblemClass.getDeclaredConstructor(
                            String.class, boolean.class).newInstance(difficulty, false);
                    break;
                default:
                    mathProblem = selectedProblemClass.getDeclaredConstructor(
                            String.class).newInstance(difficulty);
                    break;
            }
            start();
        } catch (InstantiationException | IllegalAccessException | IllegalArgumentException 
                | InvocationTargetException | NoSuchMethodException | SecurityException ex) {
            System.err.println(ex.getMessage());
        }
    }//GEN-LAST:event_generateRandomButtonActionPerformed

    private String getSelectedButtonText(final javax.swing.ButtonGroup buttonGroup) {
        for (Enumeration<AbstractButton> buttons = buttonGroup.getElements(); buttons.hasMoreElements(); ) {
            final AbstractButton button = buttons.nextElement();
            if (button.isSelected())
                return button.getText();
        }
        return null;
    }
    
    private void setParametersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setParametersButtonActionPerformed
        resetProblemPart();
        generateWithParametersButton.setEnabled(true);
        final int problemIndex = getSelectedProblemIndex();
        
        final List<String> texts = new ArrayList(Arrays.asList(Config.PARAMS[problemIndex]));
        for (int i = 0; i < texts.size(); ++i) {
            parameterLabelArray[i].setEnabled(true);
            parameterArray[i].setEnabled(true);
            parameterArray[i].setText(texts.get(i));
        }
    }//GEN-LAST:event_setParametersButtonActionPerformed
    
    private void parameter1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_parameter1FocusGained
        parameter1.selectAll();
    }//GEN-LAST:event_parameter1FocusGained

    private void parameter2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_parameter2FocusGained
        parameter2.selectAll();
    }//GEN-LAST:event_parameter2FocusGained

    private void parameter3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_parameter3FocusGained
        parameter3.selectAll();
    }//GEN-LAST:event_parameter3FocusGained

    private void parameter4FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_parameter4FocusGained
        parameter4.selectAll();
    }//GEN-LAST:event_parameter4FocusGained

    private void generateWithParametersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateWithParametersButtonActionPerformed
        mathProblem = null;
        resetProblemPart();
        List<Integer> params = new ArrayList<>();
        
        switch (getSelectedProblemIndex()) {
            case Config.GCD:
                params = UserInputChecker.checkIntegerParameters(parameterArray, this, 2);
                if (!params.isEmpty())
                    mathProblem = new GCDProblem(params.get(0), params.get(1));
                break;
                
            case Config.BEZOUT:
                params = UserInputChecker.checkNonNegativeParameters(parameterArray, this, 2);
                if (!params.isEmpty())
                    mathProblem = new BezoutProblem(params.get(0), params.get(1));
                break;

            case Config.INVERSE_MOD:
                params.add(UserInputChecker.positiveNumberInput(parameter1, this));
                params.add(UserInputChecker.positiveNumberInput(parameter2, this));
                if (!params.contains(null)) {
                    params = UserInputChecker.checkCoprimeParameters(parameterArray, this, false);
                    if (!params.isEmpty())
                        mathProblem = new InverseModProblem(params.get(0), params.get(1));
                }
                break;

            case Config.EULER_PHI:
                params.add(UserInputChecker.positiveNumberInput(parameter1, this));
                if (!params.contains(null))
                    mathProblem = new EulerPhiProblem(params.get(0));
                break;

            case Config.LINEAR_CONG:
                params = UserInputChecker.linearCongruenceNumberInput(parameterArray, this);
                if (!params.isEmpty())
                    mathProblem = new LinearCongruenceProblem(params.get(0), params.get(1), params.get(2));
                break;

            case Config.LINEAR_CONG_SYSTEM:
                final Integer count =
                        UserInputChecker.numberInput(parameter1, this, 1, 4, false);
                if (count == null)
                    break;
                final List<List<Integer>> lParams =
                        UserInputChecker.linearCongruenceSystemInput(parameterArray, this, count);
                if (!lParams.isEmpty())
                    mathProblem = new LinearCongruenceSystemProblem(count,
                            lParams.get(0), lParams.get(1), lParams.get(2));
                break;

            case Config.UNIT_GROUP_ELEMENT_ORDER:
                params.add(UserInputChecker.positiveNumberInput(parameter1, this));
                params.add(UserInputChecker.numberInput(parameter2, this, 2, Config.MAX_INT, false));
                if (!params.contains(null)) {
                    params = UserInputChecker.checkCoprimeParameters(parameterArray, this, true);
                    if (!params.isEmpty())
                        mathProblem = new UnitGroupElementOrderProblem(params.get(0), params.get(1));
                }
                break;

            case Config.MOD_POW:
                params.add(UserInputChecker.integerNumberInput(parameter1, this));
                params.add(UserInputChecker.nonNegativeNumberInput(parameter2, this));
                params.add(UserInputChecker.positiveNumberInput(parameter3, this));
                if (!params.contains(null))
                    mathProblem = new ModularPowerProblem(params.get(0), params.get(1), params.get(2));
                break;

            case Config.LEGENDRE:
                params.add(UserInputChecker.integerNumberInput(parameter1, this));
                params.add(UserInputChecker.primeInput(parameter2, this, true));
                if (!params.contains(null))
                    mathProblem = new LegendreSymbolProblem(params.get(0), params.get(1));
                break;
                
            case Config.QUADRATIC_CONG_SIMPLE:
                params.add(UserInputChecker.integerNumberInput(parameter1, this));
                params.add(UserInputChecker.positiveNumberInput(parameter2, this));
                if (!params.contains(null))
                    mathProblem = new QuadraticCongruenceSimpleProblem(params.get(0), params.get(1));
                break;
                
            case Config.QUADRATIC_CONG_GENERAL:
                params.add(UserInputChecker.nonZeroNumberInput(parameter1, this));
                params.add(UserInputChecker.positiveNumberInput(parameter4, this));
                if (!params.contains(null)) {
                    final JTextField[] inputFields = new JTextField[] {parameter1, parameter4};
                    params = UserInputChecker.checkCoprimeParameters(inputFields, this, false);
                    if (!params.isEmpty()) {
                        params.add(UserInputChecker.integerNumberInput(parameter2, this));
                        params.add(UserInputChecker.integerNumberInput(parameter3, this));
                        if (!params.contains(null))
                            mathProblem = new QuadraticCongruenceGeneralProblem(params.get(0),
                                    params.get(2), params.get(3), params.get(1));
                    }
                }
                break;
                
            case Config.BINOMIAL_CONG:
                params.add(UserInputChecker.positiveNumberInput(parameter1, this));
                params.add(UserInputChecker.integerNumberInput(parameter2, this));
                params.add(UserInputChecker.positiveNumberInput(parameter3, this));
                if (!params.contains(null))
                    mathProblem = new BinomialCongruenceProblem(params.get(0), params.get(1), params.get(2));
                break;
            
            case Config.PERM_ORDER:
                final Integer size = UserInputChecker.numberInput(parameter1, this, 1, 20, false);
                if (size == null)
                    break;
                params = UserInputChecker.permutationInput(parameter2, this, size);
                if (!params.isEmpty())
                    mathProblem = new PermutationOrderProblem(params);
                break;

        }
        if (mathProblem != null)
            start();
    }//GEN-LAST:event_generateWithParametersButtonActionPerformed

    private void problemTypeSelectionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_problemTypeSelectionItemStateChanged
        resetSetParametersPart();
        resetProblemPart();
    }//GEN-LAST:event_problemTypeSelectionItemStateChanged

    private void settingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsButtonActionPerformed
        suspendMainFrame(new SettingsFrame());
    }//GEN-LAST:event_settingsButtonActionPerformed

    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        suspendMainFrame(new HelpFrame());
    }//GEN-LAST:event_helpButtonActionPerformed

    private void suspendMainFrame(final javax.swing.JFrame newFrame) {
        final MainFrame mainFrame = this;
        mainFrame.setEnabled(false);
        newFrame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent we) {
                mainFrame.setEnabled(true);
            }
        });
        newFrame.setVisible(true);
    }
    
    private void userAnswerFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_userAnswerFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER)
            checkButtonActionPerformed(null);
    }//GEN-LAST:event_userAnswerFieldKeyPressed

    /**
     * Display the form.
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton checkButton;
    private javax.swing.JLabel checkIcon;
    private javax.swing.JButton copyToClipboardButton;
    private javax.swing.ButtonGroup difficultyButtonGroup;
    private javax.swing.JLabel difficultyLabel;
    private javax.swing.JSeparator difficultySeparator1;
    private javax.swing.JSeparator difficultySeparator2;
    private javax.swing.JRadioButton easyButton;
    private javax.swing.JButton exportToPDFButton;
    private javax.swing.JButton generateRandomButton;
    private javax.swing.JButton generateWithParametersButton;
    private javax.swing.JRadioButton hardButton;
    private javax.swing.JButton helpButton;
    private javax.swing.JSeparator horizontalSeparator;
    private javax.swing.JLabel logoField;
    private javax.swing.JRadioButton mediumButton;
    private javax.swing.JTextField parameter1;
    private javax.swing.JLabel parameter1Label;
    private javax.swing.JTextField parameter2;
    private javax.swing.JLabel parameter2Label;
    private javax.swing.JTextField parameter3;
    private javax.swing.JLabel parameter3Label;
    private javax.swing.JTextField parameter4;
    private javax.swing.JLabel parameter4Label;
    private javax.swing.JLabel problemArea;
    private javax.swing.JLabel problemTypeLabel;
    private javax.swing.JSeparator problemTypeLabelSeparator1;
    private javax.swing.JSeparator problemTypeLabelSeparator2;
    private javax.swing.JComboBox problemTypeSelection;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton setParametersButton;
    private javax.swing.JButton settingsButton;
    private javax.swing.JButton showSolutionLaTeXButton;
    private javax.swing.JButton showSolutionPlaintextButton;
    private javax.swing.JSeparator smallHorizontalSeparator;
    private javax.swing.JTextPane solutionArea;
    private javax.swing.JScrollPane solutionScrollPane;
    private javax.swing.JTextField userAnswerField;
    private javax.swing.JSeparator verticalSeparator;
    // End of variables declaration//GEN-END:variables

    private javax.swing.JLabel[] parameterLabelArray;
    private javax.swing.JTextField[] parameterArray;
    private JComponent[] problemPartComponentsArray;
    
    /**
     * Called when generating a problem (randomly or with parameters)
     */
    private void start() {
        final String problem = mathProblem.getProblemLaTeX();
        final BufferedImage image = Utils.createLaTeXImage(problem);
        problemArea.setIcon(new ImageIcon(image));
        for (int i = 0; i < 7; ++i)
            problemPartComponentsArray[i].setEnabled(true);
    }
    
    private void resetProblemPart() {
        problemArea.setIcon(null);
        userAnswerField.setText("Pole pro výsledek");
        userAnswerField.setBackground(Color.white);
        checkIcon.setIcon(null);
        solutionArea.setText("");
        for (int i = 0; i < 7; ++i)
            problemPartComponentsArray[i].setEnabled(false);
    }
    
    private void resetSetParametersPart() {
        for (int i = 0; i < 4; ++i) {
            parameterLabelArray[i].setEnabled(false);
            parameterArray[i].setEnabled(false);
            parameterArray[i].setText("");
            parameterArray[i].setBackground(Color.white);
        }
        generateWithParametersButton.setEnabled(false);
    }
    
    private int getSelectedProblemIndex() {
        final String selectedProblem = problemTypeSelection.getSelectedItem().toString();
        return Arrays.asList(Config.PROBLEMS).indexOf(selectedProblem); 
    }
}
