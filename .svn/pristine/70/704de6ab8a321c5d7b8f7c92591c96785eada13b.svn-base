package Numbermat.Problems;

import Numbermat.Algorithms;
import Numbermat.AlgorithmsSteps;
import Numbermat.Pair;
import Numbermat.Utils;
import java.util.ArrayList;

/**
 * Euler's totient function.
 * 
 * @author Valdemar Svabensky <395868(at)mail(dot)muni(dot)cz>
 */
public final class EulerPhiProblem extends MathProblem {
    
    private int n;
    
    /**
     * Instantiate with pseudo-randomly generated parameters.
     * @param difficulty One of Config.EASY, Config.MEDIUM, Config.HARD
     */
    public EulerPhiProblem(final String difficulty) {
        easyBounds = new Pair(1, 99);
        mediumBounds = new Pair(100, 999);
        hardBounds = new Pair(1000, 2999);
        
        final Pair<Integer, Integer> bounds = initBounds(difficulty);
        final int lowerBound = bounds.getFirst();
        final int upperBound = bounds.getSecond();
        
        final int nn = Algorithms.randInt(lowerBound, upperBound);
        setVariables(nn);
    }
    
    /**
     * Instantiate with user provided parameters.
     * @param nn Positive integer
     */
    public EulerPhiProblem(final int nn) {
        setVariables(nn);
    }
    
    private void setVariables(final int nn) {
        n = nn;
        result = new ArrayList<>(1);
        result.add(Algorithms.eulerPhi(n));
        prepareAll();
    }

    @Override
    protected void prepareProblemPlaintext() {
        problemPlaintext = AlgorithmsSteps.buildPhiEquals(n).toString();
    }

    @Override
    protected void prepareProblemLaTeX() {
        problemLaTeX = Utils.prepareDisplayMath(problemPlaintext);
    }

    @Override
    protected void prepareSolutionPlaintext() {
        solutionPlaintext = AlgorithmsSteps.eulerPhiSteps(n);
    }

    @Override
    protected void prepareSolutionLaTeX() {
        if (n == 1) {
            solutionLaTeX = new StringBuilder("\\begin{align}").append(Utils.NEWLINE)
                    .append("\\varphi(1) &= 1").append("\\end{align}").toString();
        } else {
            solutionLaTeX = Utils.prepareBasicMath(solutionPlaintext);
            solutionLaTeX = Utils.prepareAlignMath(solutionLaTeX);
        }
    }
}
