package Numbermat.GUI;

import java.awt.Color;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.Arrays;
import java.util.Enumeration;
import javax.swing.AbstractButton;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import Numbermat.Algorithms;
import Numbermat.GUI.utils.Configuration;
import Numbermat.Problems.BezoutProblem;
import Numbermat.GUI.utils.UserInputChecker;
import Numbermat.Problems.GCDProblem;
import Numbermat.Problems.InverseModProblem;
import Numbermat.Problems.MathProblem;
import Numbermat.Utils;

/**
 *
 * @author Valdemar Svabensky <395868@mail.muni.cz>
 */
public class MainFrame extends javax.swing.JFrame {

    private MathProblem mathProblem = null;
    
    public MainFrame() {
        initComponents();
        parameterLabelArray = new javax.swing.JLabel[] {
            parameter1Label, parameter2Label, parameter3Label, parameter4Label
        };
        parameterArray = new javax.swing.JTextField[] {
            parameter1, parameter2, parameter3, parameter4
        };
        problemPartComponentsArray = new JComponent[] {
            userAnswerField, checkButton,
            showSolutionLaTeXButton, showSolutionPlaintextButton,
            copyToClipboardButton, exportToPDFButton, resetButton
        };
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        difficultyButtonGroup = new javax.swing.ButtonGroup();
        logoField = new javax.swing.JLabel();
        difficultyLabel = new javax.swing.JLabel();
        difficultySeparator1 = new javax.swing.JSeparator();
        difficultySeparator2 = new javax.swing.JSeparator();
        easyButton = new javax.swing.JRadioButton();
        mediumButton = new javax.swing.JRadioButton();
        hardButton = new javax.swing.JRadioButton();
        problemTypeLabel = new javax.swing.JLabel();
        problemTypeLabelSeparator1 = new javax.swing.JSeparator();
        problemTypeLabelSeparator2 = new javax.swing.JSeparator();
        problemTypeSelection = new javax.swing.JComboBox();
        generateRandomButton = new javax.swing.JButton();
        setParametersButton = new javax.swing.JButton();
        parameter1Label = new javax.swing.JLabel();
        parameter1 = new javax.swing.JTextField();
        parameter2Label = new javax.swing.JLabel();
        parameter2 = new javax.swing.JTextField();
        parameter3Label = new javax.swing.JLabel();
        parameter3 = new javax.swing.JTextField();
        parameter4Label = new javax.swing.JLabel();
        parameter4 = new javax.swing.JTextField();
        smallHorizontalSeparator = new javax.swing.JSeparator();
        settingsButton = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();
        generateWithParametersButton = new javax.swing.JButton();
        verticalSeparator = new javax.swing.JSeparator();
        problemArea = new javax.swing.JLabel();
        userAnswerField = new javax.swing.JTextField();
        checkButton = new javax.swing.JButton();
        checkIcon = new javax.swing.JLabel();
        horizontalSeparator = new javax.swing.JSeparator();
        showSolutionLaTeXButton = new javax.swing.JButton();
        showSolutionPlaintextButton = new javax.swing.JButton();
        solutionScrollPane = new javax.swing.JScrollPane();
        solutionArea = new javax.swing.JTextPane();
        copyToClipboardButton = new javax.swing.JButton();
        exportToPDFButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        difficultyButtonGroup.add(hardButton);
        difficultyButtonGroup.add(easyButton);
        difficultyButtonGroup.add(mediumButton);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Numbermat: Generátor příkladů");
        setMinimumSize(new java.awt.Dimension(800, 600));
        setName("MainFrame"); // NOI18N
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        logoField.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Numbermat/GUI/Images/logo-numbermat.png"))); // NOI18N
        getContentPane().add(logoField, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 30, -1, -1));

        difficultyLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        difficultyLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        difficultyLabel.setText("OBTÍŽNOST");
        getContentPane().add(difficultyLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 105, 275, -1));

        difficultySeparator1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        difficultySeparator1.setPreferredSize(new java.awt.Dimension(90, 2));
        getContentPane().add(difficultySeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 110, -1, -1));

        difficultySeparator2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        difficultySeparator2.setPreferredSize(new java.awt.Dimension(90, 2));
        getContentPane().add(difficultySeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 110, -1, -1));

        easyButton.setMnemonic('s');
        easyButton.setText("Lehká");
        easyButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        easyButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        getContentPane().add(easyButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(44, 133, -1, -1));

        mediumButton.setMnemonic('d');
        mediumButton.setSelected(true);
        mediumButton.setText("Střední");
        mediumButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        mediumButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        getContentPane().add(mediumButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(134, 133, -1, -1));

        hardButton.setMnemonic('f');
        hardButton.setText("Těžká");
        hardButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        hardButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        getContentPane().add(hardButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(228, 133, -1, -1));

        problemTypeLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        problemTypeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        problemTypeLabel.setText("TYP PŘÍKLADU");
        getContentPane().add(problemTypeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 200, 275, -1));

        problemTypeLabelSeparator1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        problemTypeLabelSeparator1.setPreferredSize(new java.awt.Dimension(80, 2));
        getContentPane().add(problemTypeLabelSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 205, -1, -1));

        problemTypeLabelSeparator2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        problemTypeLabelSeparator2.setPreferredSize(new java.awt.Dimension(80, 2));
        getContentPane().add(problemTypeLabelSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 205, -1, -1));

        problemTypeSelection.setModel(new javax.swing.DefaultComboBoxModel(Configuration.PROBLEMS));
        problemTypeSelection.setPreferredSize(new java.awt.Dimension(275, 30));
        problemTypeSelection.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                problemTypeSelectionItemStateChanged(evt);
            }
        });
        getContentPane().add(problemTypeSelection, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 225, -1, -1));

        generateRandomButton.setBackground(new java.awt.Color(0, 102, 0));
        generateRandomButton.setForeground(new java.awt.Color(255, 255, 255));
        generateRandomButton.setMnemonic('x');
        generateRandomButton.setText("<html><p align=\"center\">Generovat<br/>náhodně</p></html>");
        generateRandomButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        generateRandomButton.setPreferredSize(new java.awt.Dimension(100, 60));
        generateRandomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateRandomButtonActionPerformed(evt);
            }
        });
        getContentPane().add(generateRandomButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 275, -1, -1));

        setParametersButton.setMnemonic('c');
        setParametersButton.setText("<html><p align=\"center\">Nastavit<br/>parametry</p></html>");
        setParametersButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        setParametersButton.setPreferredSize(new java.awt.Dimension(160, 60));
        setParametersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setParametersButtonActionPerformed(evt);
            }
        });
        getContentPane().add(setParametersButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(132, 275, -1, -1));

        parameter1Label.setText("Parametr #1");
        parameter1Label.setEnabled(false);
        parameter1Label.setPreferredSize(new java.awt.Dimension(100, 25));
        getContentPane().add(parameter1Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 350, -1, -1));

        parameter1.setEnabled(false);
        parameter1.setPreferredSize(new java.awt.Dimension(160, 25));
        parameter1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                parameter1FocusGained(evt);
            }
        });
        getContentPane().add(parameter1, new org.netbeans.lib.awtextra.AbsoluteConstraints(132, 350, -1, -1));

        parameter2Label.setText("Parametr #2");
        parameter2Label.setEnabled(false);
        parameter2Label.setPreferredSize(new java.awt.Dimension(100, 25));
        getContentPane().add(parameter2Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 385, -1, -1));

        parameter2.setEnabled(false);
        parameter2.setPreferredSize(new java.awt.Dimension(160, 25));
        parameter2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                parameter2FocusGained(evt);
            }
        });
        getContentPane().add(parameter2, new org.netbeans.lib.awtextra.AbsoluteConstraints(132, 385, -1, -1));

        parameter3Label.setText("Parametr #3");
        parameter3Label.setEnabled(false);
        parameter3Label.setPreferredSize(new java.awt.Dimension(100, 25));
        getContentPane().add(parameter3Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 420, -1, -1));

        parameter3.setEnabled(false);
        parameter3.setPreferredSize(new java.awt.Dimension(160, 25));
        parameter3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                parameter3FocusGained(evt);
            }
        });
        getContentPane().add(parameter3, new org.netbeans.lib.awtextra.AbsoluteConstraints(132, 420, -1, -1));

        parameter4Label.setText("Parametr #4");
        parameter4Label.setEnabled(false);
        parameter4Label.setPreferredSize(new java.awt.Dimension(100, 25));
        getContentPane().add(parameter4Label, new org.netbeans.lib.awtextra.AbsoluteConstraints(24, 455, -1, -1));

        parameter4.setEnabled(false);
        parameter4.setPreferredSize(new java.awt.Dimension(160, 25));
        parameter4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                parameter4FocusGained(evt);
            }
        });
        getContentPane().add(parameter4, new org.netbeans.lib.awtextra.AbsoluteConstraints(132, 455, -1, -1));

        smallHorizontalSeparator.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        smallHorizontalSeparator.setPreferredSize(new java.awt.Dimension(90, 2));
        getContentPane().add(smallHorizontalSeparator, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 497, -1, -1));

        settingsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Numbermat/GUI/Images/settings-icon.png"))); // NOI18N
        settingsButton.setPreferredSize(new java.awt.Dimension(40, 30));
        settingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsButtonActionPerformed(evt);
            }
        });
        getContentPane().add(settingsButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 510, -1, -1));

        helpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Numbermat/GUI/Images/help-icon.png"))); // NOI18N
        helpButton.setPreferredSize(new java.awt.Dimension(40, 30));
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });
        getContentPane().add(helpButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(68, 510, -1, -1));

        generateWithParametersButton.setBackground(new java.awt.Color(0, 102, 0));
        generateWithParametersButton.setForeground(new java.awt.Color(255, 255, 255));
        generateWithParametersButton.setMnemonic('v');
        generateWithParametersButton.setText("Generovat");
        generateWithParametersButton.setEnabled(false);
        generateWithParametersButton.setPreferredSize(new java.awt.Dimension(160, 45));
        generateWithParametersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateWithParametersButtonActionPerformed(evt);
            }
        });
        getContentPane().add(generateWithParametersButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(132, 495, -1, -1));

        verticalSeparator.setOrientation(javax.swing.SwingConstants.VERTICAL);
        verticalSeparator.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        verticalSeparator.setPreferredSize(new java.awt.Dimension(2, 545));
        getContentPane().add(verticalSeparator, new org.netbeans.lib.awtextra.AbsoluteConstraints(305, 10, -1, -1));

        problemArea.setBackground(new java.awt.Color(255, 255, 255));
        problemArea.setOpaque(true);
        problemArea.setPreferredSize(new java.awt.Dimension(280, 90));
        getContentPane().add(problemArea, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 30, -1, -1));

        userAnswerField.setText("Pole pro výsledek");
        userAnswerField.setEnabled(false);
        userAnswerField.setPreferredSize(new java.awt.Dimension(140, 50));
        userAnswerField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                userAnswerFieldFocusGained(evt);
            }
        });
        userAnswerField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                userAnswerFieldKeyPressed(evt);
            }
        });
        getContentPane().add(userAnswerField, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 30, -1, -1));

        checkButton.setText("Zkontrolovat");
        checkButton.setEnabled(false);
        checkButton.setPreferredSize(new java.awt.Dimension(140, 30));
        checkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkButtonActionPerformed(evt);
            }
        });
        getContentPane().add(checkButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 90, -1, -1));

        checkIcon.setPreferredSize(new java.awt.Dimension(30, 30));
        getContentPane().add(checkIcon, new org.netbeans.lib.awtextra.AbsoluteConstraints(755, 40, -1, -1));

        horizontalSeparator.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)));
        horizontalSeparator.setPreferredSize(new java.awt.Dimension(450, 2));
        getContentPane().add(horizontalSeparator, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 140, -1, -1));

        showSolutionLaTeXButton.setMnemonic('g');
        showSolutionLaTeXButton.setText("Zobrazit řešení (LaTeX)");
        showSolutionLaTeXButton.setEnabled(false);
        showSolutionLaTeXButton.setPreferredSize(new java.awt.Dimension(220, 30));
        showSolutionLaTeXButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showSolutionLaTeXButtonActionPerformed(evt);
            }
        });
        getContentPane().add(showSolutionLaTeXButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 160, -1, -1));

        showSolutionPlaintextButton.setMnemonic('h');
        showSolutionPlaintextButton.setText("Zobrazit řešení (text)");
        showSolutionPlaintextButton.setEnabled(false);
        showSolutionPlaintextButton.setPreferredSize(new java.awt.Dimension(220, 30));
        showSolutionPlaintextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showSolutionPlaintextButtonActionPerformed(evt);
            }
        });
        getContentPane().add(showSolutionPlaintextButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 160, -1, -1));

        solutionScrollPane.setPreferredSize(new java.awt.Dimension(450, 300));

        solutionArea.setEditable(false);
        solutionScrollPane.setViewportView(solutionArea);

        getContentPane().add(solutionScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 200, -1, -1));

        copyToClipboardButton.setMnemonic('b');
        copyToClipboardButton.setText("Kopírovat příklad");
        copyToClipboardButton.setEnabled(false);
        copyToClipboardButton.setPreferredSize(new java.awt.Dimension(145, 30));
        copyToClipboardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyToClipboardButtonActionPerformed(evt);
            }
        });
        getContentPane().add(copyToClipboardButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 510, -1, -1));

        exportToPDFButton.setMnemonic('n');
        exportToPDFButton.setText("Export do PDF");
        exportToPDFButton.setEnabled(false);
        exportToPDFButton.setPreferredSize(new java.awt.Dimension(145, 30));
        exportToPDFButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportToPDFButtonActionPerformed(evt);
            }
        });
        getContentPane().add(exportToPDFButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 510, -1, -1));

        resetButton.setMnemonic('m');
        resetButton.setText("Restart");
        resetButton.setEnabled(false);
        resetButton.setPreferredSize(new java.awt.Dimension(145, 30));
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });
        getContentPane().add(resetButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 510, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        this.dispose();
        new MainFrame().setVisible(true);
    }//GEN-LAST:event_resetButtonActionPerformed

    private void userAnswerFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_userAnswerFieldFocusGained
        if (evt.getOppositeComponent() != null) {
            userAnswerField.setText("");
            checkIcon.setIcon(null);
        }
    }//GEN-LAST:event_userAnswerFieldFocusGained

    private void checkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkButtonActionPerformed
        final int[] expectedResult = mathProblem.getResult();
        int[] actualResult = null;
        
        switch (getSelectedProblemIndex()) {
            case Configuration.GCD:
                Integer gcd = UserInputChecker.naturalNumber(userAnswerField, this);
                if (gcd != null) {
                    actualResult = new int[1];
                    actualResult[0] = gcd;
                }
                break;
                
            case Configuration.BEZOUT:
                actualResult = UserInputChecker.bezoutCoefficients(userAnswerField, this);
                break;
                
            case Configuration.INVERSE_MOD:
                Integer inverse = UserInputChecker.naturalNumber(userAnswerField, this);
                if (inverse != null) {
                    actualResult = new int[1];
                    actualResult[0] = inverse;
                }
                break;
                
            case Configuration.FACTORIZE:
                break;
            
            case Configuration.EULER_PHI:
                break;
        }
        if (actualResult != null) {
            if (Arrays.equals(actualResult, expectedResult))
                checkIcon.setIcon(new ImageIcon(getClass().getResource(
                        "/Numbermat/GUI/Images/correct.png")));
            else
                checkIcon.setIcon(new ImageIcon(getClass().getResource(
                        "/Numbermat/GUI/Images/wrong.png")));
        }
    }//GEN-LAST:event_checkButtonActionPerformed

    private void showSolutionLaTeXButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showSolutionLaTeXButtonActionPerformed
        solutionArea.setText("");
        final String solutionLaTeX = mathProblem.getSolutionLaTeX();
        final BufferedImage solutionImg = Utils.createLaTeXImage(solutionLaTeX);
        /* Concatenate final part of the image 
        StringBuilder finalPart = new StringBuilder();
        finalPart.append(GCDProblem.getProblemLaTeX());
        finalPart.insert(finalPart.lastIndexOf("\\]"), GCDProblem.getGcd());
        BufferedImage solution2 = Utils.createLaTeXImage(finalPart.toString());
        BufferedImage result = Main.concatImages(solution, solution2); */
        solutionArea.insertIcon(new ImageIcon(solutionImg));
    }//GEN-LAST:event_showSolutionLaTeXButtonActionPerformed

    private void showSolutionPlaintextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showSolutionPlaintextButtonActionPerformed
        solutionArea.removeAll();
        solutionArea.setText(mathProblem.getSolutionPlaintext());
    }//GEN-LAST:event_showSolutionPlaintextButtonActionPerformed

    private void copyToClipboardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyToClipboardButtonActionPerformed
        final String out = mathProblem.getProblemPlaintext() + mathProblem.getSolutionPlaintext();
        final StringSelection selection = new StringSelection(out);
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents(selection, null);
    }//GEN-LAST:event_copyToClipboardButtonActionPerformed

    private void exportToPDFButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportToPDFButtonActionPerformed
        final JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setDialogTitle("Zvolte výstupnou složku");
        
        if (evt.getSource() == exportToPDFButton) {
            final int returnVal = fc.showOpenDialog(MainFrame.this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File workingDir = fc.getSelectedFile();
                Utils.exportPDF(workingDir,
                        mathProblem.getProblemLaTeX(),
                        mathProblem.getSolutionLaTeX());
            }
        }
    }//GEN-LAST:event_exportToPDFButtonActionPerformed
  
    private void generateRandomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateRandomButtonActionPerformed
        mathProblem = null;
        resetSetParametersPart();
        resetProblemPart();

        final String difficulty = getSelectedButtonText(difficultyButtonGroup);
        switch (getSelectedProblemIndex()) {
            case Configuration.GCD:
                mathProblem = new GCDProblem(difficulty, false);
                break;
                
            case Configuration.BEZOUT:
                mathProblem = new BezoutProblem(difficulty, false);
                break;
            
            case Configuration.INVERSE_MOD:
                mathProblem = new InverseModProblem(difficulty);
                break;
                
            case Configuration.FACTORIZE:
                break;
            
            case Configuration.EULER_PHI:
                break;
        }
        if (mathProblem != null)
            start();
    }//GEN-LAST:event_generateRandomButtonActionPerformed

    private String getSelectedButtonText(javax.swing.ButtonGroup buttonGroup) {
        for (Enumeration<AbstractButton> buttons = buttonGroup.getElements(); buttons.hasMoreElements();) {
            AbstractButton button = buttons.nextElement();
            if (button.isSelected()) {
                return button.getText();
            }
        }
        return null;
    }
    
    private void setParametersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setParametersButtonActionPerformed
        resetProblemPart();
        generateWithParametersButton.setEnabled(true);
        switch (getSelectedProblemIndex()) {
            case Configuration.GCD:
                prepareParameters(2, "Přirozené číslo");
                break;
                
            case Configuration.BEZOUT:
                prepareParameters(2, "Přirozené číslo");
                break;
            
            case Configuration.INVERSE_MOD:
                prepareParameters(2, "Přirozené číslo");
                break;
                
            case Configuration.FACTORIZE:
                break;
            
            case Configuration.EULER_PHI:
                break;
        }
    }//GEN-LAST:event_setParametersButtonActionPerformed

    private void prepareParameters(int count, String text) {
        for (int i = 0; i < count; ++i) {
            parameterLabelArray[i].setEnabled(true);
            parameterArray[i].setEnabled(true);
            parameterArray[i].setText(text);
        }
    }
    
    private void parameter1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_parameter1FocusGained
        parameter1.setText("");
    }//GEN-LAST:event_parameter1FocusGained

    private void parameter2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_parameter2FocusGained
        parameter2.setText("");
    }//GEN-LAST:event_parameter2FocusGained

    private void parameter3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_parameter3FocusGained
        parameter3.setText("");
    }//GEN-LAST:event_parameter3FocusGained

    private void parameter4FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_parameter4FocusGained
        parameter4.setText("");
    }//GEN-LAST:event_parameter4FocusGained

    private void generateWithParametersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateWithParametersButtonActionPerformed
        mathProblem = null;
        resetProblemPart();
        switch (getSelectedProblemIndex()) {
            case Configuration.GCD: {
                Integer a = UserInputChecker.naturalNumber(parameter1, this);
                Integer b = UserInputChecker.naturalNumber(parameter2, this);
                if ((a != null) && (b != null)) {
                    mathProblem = new GCDProblem(a, b);
                }
                break;
            }
            case Configuration.BEZOUT: {
                Integer a = UserInputChecker.naturalNumber(parameter1, this);
                Integer b = UserInputChecker.naturalNumber(parameter2, this);
                if ((a != null) && (b != null)) {
                    mathProblem = new BezoutProblem(a, b);
                }
                break;
            }
            case Configuration.INVERSE_MOD: {
                Integer a = UserInputChecker.naturalNumber(parameter1, this);
                Integer b = UserInputChecker.naturalNumber(parameter2, this);
                if ((a != null) && (b != null)) {
                    if (Algorithms.isCoprime(a, b)) {
                        mathProblem = new InverseModProblem(a, b);
                    } else {
                        UserInputChecker.error(parameter2, this, "Čísla musí být nesoudělná.");
                    }
                }
                break;
            }
            case Configuration.FACTORIZE:
                break;
            
            case Configuration.EULER_PHI:
                break;
        }
        if (mathProblem != null)
            start();
    }//GEN-LAST:event_generateWithParametersButtonActionPerformed

    private void problemTypeSelectionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_problemTypeSelectionItemStateChanged
        resetSetParametersPart();
        resetProblemPart();
    }//GEN-LAST:event_problemTypeSelectionItemStateChanged

    private void settingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsButtonActionPerformed
        // set bounds
        // set latex path
    }//GEN-LAST:event_settingsButtonActionPerformed

    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        // show format of input
        // show mnemonic keys
        // show info, about and copyright
    }//GEN-LAST:event_helpButtonActionPerformed

    private void userAnswerFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_userAnswerFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            checkButtonActionPerformed(null);
        }
    }//GEN-LAST:event_userAnswerFieldKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton checkButton;
    private javax.swing.JLabel checkIcon;
    private javax.swing.JButton copyToClipboardButton;
    private javax.swing.ButtonGroup difficultyButtonGroup;
    private javax.swing.JLabel difficultyLabel;
    private javax.swing.JSeparator difficultySeparator1;
    private javax.swing.JSeparator difficultySeparator2;
    private javax.swing.JRadioButton easyButton;
    private javax.swing.JButton exportToPDFButton;
    private javax.swing.JButton generateRandomButton;
    private javax.swing.JButton generateWithParametersButton;
    private javax.swing.JRadioButton hardButton;
    private javax.swing.JButton helpButton;
    private javax.swing.JSeparator horizontalSeparator;
    private javax.swing.JLabel logoField;
    private javax.swing.JRadioButton mediumButton;
    private javax.swing.JTextField parameter1;
    private javax.swing.JLabel parameter1Label;
    private javax.swing.JTextField parameter2;
    private javax.swing.JLabel parameter2Label;
    private javax.swing.JTextField parameter3;
    private javax.swing.JLabel parameter3Label;
    private javax.swing.JTextField parameter4;
    private javax.swing.JLabel parameter4Label;
    private javax.swing.JLabel problemArea;
    private javax.swing.JLabel problemTypeLabel;
    private javax.swing.JSeparator problemTypeLabelSeparator1;
    private javax.swing.JSeparator problemTypeLabelSeparator2;
    private javax.swing.JComboBox problemTypeSelection;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton setParametersButton;
    private javax.swing.JButton settingsButton;
    private javax.swing.JButton showSolutionLaTeXButton;
    private javax.swing.JButton showSolutionPlaintextButton;
    private javax.swing.JSeparator smallHorizontalSeparator;
    private javax.swing.JTextPane solutionArea;
    private javax.swing.JScrollPane solutionScrollPane;
    private javax.swing.JTextField userAnswerField;
    private javax.swing.JSeparator verticalSeparator;
    // End of variables declaration//GEN-END:variables

    private javax.swing.JLabel[] parameterLabelArray;
    private javax.swing.JTextField[] parameterArray;
    private JComponent[] problemPartComponentsArray;
    
    /**
     * Called when generating a problem (randomly or with parameters)
     */
    private void start() {
        String problem = mathProblem.getProblemLaTeX();
        BufferedImage image = Utils.createLaTeXImage(problem);
        problemArea.setIcon(new ImageIcon(image));
        for (int i = 0; i < 7; ++i) {
            problemPartComponentsArray[i].setEnabled(true);
        }
    }
    
    private void resetProblemPart() {
        problemArea.setIcon(null);
        userAnswerField.setText("Pole pro výsledek");
        userAnswerField.setBackground(Color.white);
        checkIcon.setIcon(null);
        solutionArea.setText("");
        for (int i = 0; i < 7; ++i) {
            problemPartComponentsArray[i].setEnabled(false);
        }
    }
    
    private void resetSetParametersPart() {
        for (int i = 0; i < 3; ++i) {
            parameterLabelArray[i].setEnabled(false);
            parameterArray[i].setEnabled(false);
            parameterArray[i].setText("");
            parameterArray[i].setBackground(Color.white);
        }
        generateWithParametersButton.setEnabled(false);
    }
    
    private int getSelectedProblemIndex() {
        final String selectedProblem = problemTypeSelection.getSelectedItem().toString();
        return Arrays.asList(Configuration.PROBLEMS).indexOf(selectedProblem); 
    }
}
