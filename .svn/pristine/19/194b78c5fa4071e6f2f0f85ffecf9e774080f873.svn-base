package Numbermat.Problems;

import Numbermat.Algorithms;
import Numbermat.Pair;
import Numbermat.Utils;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Valdemar Svabensky <395868@mail.muni.cz>
 */
public final class UnitGroupOrderProblem extends MathProblem {
    
    private int n;
    private List<Integer> elements;
    
    public UnitGroupOrderProblem(String difficulty) {
        easyBounds = new Pair(2, 50);
        mediumBounds = new Pair(50, 100);
        hardBounds = new Pair(100, 200);
        
        Pair<Integer, Integer> bounds = initBounds(difficulty);
        int lowerBound = bounds.getFirst();
        int upperBound = bounds.getSecond();
        
        int n1 = Algorithms.randInt(lowerBound, upperBound);
        setVariables(n1);
    }
    
    public UnitGroupOrderProblem(int n1) {
        setVariables(n1);
    }
    
    private void setVariables(int n1) {
        n = n1;
        elements = Algorithms.elementsOfUnitGroup(n);
        result = new ArrayList<>(1);
        result.add(elements.size());
        prepareAll();
    }

    @Override
    protected void prepareProblemPlaintext() {
        StringBuilder sb = new StringBuilder();
        sb.append("Určete prvky grupy Z").append(n).append("×.").append(Utils.NEWLINE);
        problemPlaintext = sb.toString();
    }

    @Override
    protected void prepareProblemLaTeX() {
        StringBuilder sb = new StringBuilder();
        sb.append("\\text{Ur\\v{c}ete \\v{r}\\'ad grupy }$\\mathbb{Z}_{").append(n).append("}^\\times$\\text{.}");
        problemLaTeX = sb.toString();
    }

    @Override
    protected void prepareSolutionPlaintext() {
        solutionPlaintext = Algorithms.elementsOfUnitGroupSteps(n);
    }

    @Override
    protected void prepareSolutionLaTeX() {
        solutionLaTeX = Utils.prepareSetsMath(solutionPlaintext);
        solutionLaTeX = Utils.prepareAlignedMath(solutionLaTeX);
        solutionLaTeX = solutionLaTeX.replaceAll("Řád grupy:", "\\\\text{Řád grupy}&:");
        
        StringBuilder sb = new StringBuilder(solutionLaTeX);
        int commaIndex = sb.indexOf(", ");
        int counter = 1;
        while (commaIndex != -1) {
            if (counter % 10 == 0)
                sb.replace(commaIndex, commaIndex + 2, ",\\\\&");
            commaIndex += 2;
            commaIndex = sb.indexOf(", ", commaIndex);
            counter++;
        }
        solutionLaTeX = sb.toString();
    }
}
