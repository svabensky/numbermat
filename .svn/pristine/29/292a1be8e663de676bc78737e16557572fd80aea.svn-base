package Numbermat.Problems;

import Numbermat.Algorithms;
import Numbermat.Pair;
import Numbermat.Utils;
import java.util.ArrayList;

/**
 *
 * @author Valdemar Svabensky <395868@mail.muni.cz>
 */
public final class EulerPhiProblem extends MathProblem {
    
    private int n;
    
    public EulerPhiProblem(String difficulty) {
        easyBounds = new Pair(1, 99);
        mediumBounds = new Pair(100, 999);
        hardBounds = new Pair(1000, 2999);
        
        Pair<Integer, Integer> bounds = initBounds(difficulty);
        int lowerBound = bounds.getFirst();
        int upperBound = bounds.getSecond();
        int n1 = Algorithms.randInt(lowerBound, upperBound, false);
        setVariables(n1);
    }
    
    public EulerPhiProblem(int n1) {
        setVariables(n1);
    }
    
    private void setVariables(int n1) {
        n = n1;
        result = new ArrayList<>(1);
        result.add(Algorithms.eulerPhi(n));
        prepareAll();
    }

    @Override
    protected void prepareProblemPlaintext() {
        problemPlaintext = "Ï†(" + n + ") = ?" + Utils.NEWLINE + Utils.NEWLINE;
    }

    @Override
    protected void prepareProblemLaTeX() {
        problemLaTeX = "$\\varphi(" + n + ") =$";
    }

    @Override
    protected void prepareSolutionPlaintext() {
        solutionPlaintext = Algorithms.eulerPhiSteps(n);
    }

    @Override
    protected void prepareSolutionLaTeX() {
        // This method does not use Utils.prepareAlignedMath() !
        String solutionCopy = Utils.prepareBasicMath(solutionPlaintext);
        solutionCopy = solutionCopy.replaceAll("=", "&=");
        
        StringBuilder sb = new StringBuilder();
        sb.append("\\begin{align}").append(Utils.NEWLINE);
        sb.append(solutionCopy);
        if (n > 1)
            Utils.insertLaTeXNewlineSymbol(sb, sb.lastIndexOf("{align}") + 9, false);
        sb.append("\\end{align}");
        solutionLaTeX = sb.toString();
    }
}
